{
	"version": 3,
	"file": "h3_fight_sim/__javascript__/fight_sim.js",
	"sources": [
		"",
		"/home/maciek/.venv3.6.3/h3_django/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/__javascript__/__core__.mod.js",
		"/home/maciek/.venv3.6.3/h3_django/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/__base__.py",
		"/home/maciek/.venv3.6.3/h3_django/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/__standard__.py",
		"/home/maciek/.venv3.6.3/h3_django/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/__javascript__/__builtin__.mod.js",
		"h3_fight_sim/combat.py",
		"h3_fight_sim/crtraits.py",
		"/home/maciek/.venv3.6.3/h3_django/lib/python3.6/site-packages/transcrypt/modules/math/__init__.py",
		"/home/maciek/.venv3.6.3/h3_django/lib/python3.6/site-packages/transcrypt/modules/random/__init__.py",
		"h3_fight_sim/unit.py",
		"h3_fight_sim/fight_sim.py"
	],
	"sourcesContent": [
		"__pragma__ ('padding')",
		"    var __all__ = {};\n    var __world__ = __all__;\n    \n    /* Nested module-object creator, part of the nesting may already exist and have attributes\n    \n    A Transcrypt applicaton consists of a main module and additional modules.\n    Transcrypt modules constitute a unique, unambigous tree by their dotted names, no matter which of the alternative module root paths they come from.\n    The main module is represented by a main function by the name of the application.\n    The locals of this function constitute the outer namespace of the Transcrypt application.\n    References to all local variables of this function are also assigned to attributes of local variable __all__, using the variable names as an attribute names.\n    The main function returns this local variable __all__ (that inside the function is also known by the name __world__)\n    Normally this function result is assigned to window.<application name>.\n    The function may than be exited (unless its main line starts an ongoing activity), but the application namespace stays alive tby the reference that window has to it.\n    In case of the ongoing activity including the script is enough to start it, in other cases it has to be started explicitly by calling window.<application name>.<a function>.\n    There may be multiple such entrypoint functions.\n    \n    Additional modules are represented by objects rather than functions, nested into __world__ (so into __all__ of the main function).\n    This nesting can be directly or indirectly, according to the dotted paths of the additional modules.\n    One of the methods of the module object is the __init__ function, that's executed once at module initialisation time.\n    \n    The additional modues also have an __all__ variable, an attribute rather than a local variable.\n    However this __all__ object is passed to the __init__ function, so becomes a local variable there.\n    Variables in additional modules first become locals to the __init__ function but references to all of them are assigend to __all__ under their same names.\n    This resembles the cause of affairs in the main function.\n    However __world__ only referes to the __all__ of the main module, not of any additional modules.\n    Importing a module boils down to adding all members of its __all__ to the local namespace, directly or via dotted access, depending on the way of import.\n    \n    In each local namespace of the module function (main function for main module, __init__ for additional modules) there's a variable __name__ holding the name of the module.\n    Classes are created inside the static scope of a particular module, and at that (class creation) time their variable __module__ gets assigned a reference to __name__.\n    This assignement is generated explicitly by the compiler, as the class creation function __new__ of the metaclass isn't in the static scope containing __name__.\n    \n    In case of\n        import a\n        import a.b\n    a will have been created at the moment that a.b is imported,\n    so all a.b. is allowed to do is an extra attribute in a, namely a reference to b,\n    not recreate a, since that would destroy attributes previously present in a\n    \n    In case of\n        import a.b\n        import a\n    a will have to be created at the moment that a.b is imported\n    \n    In general in a chain\n        import a.b.c.d.e\n    a, a.b, a.b.c and a.b.c.d have to exist before e is created, since a.b.c.d should hold a reference to e.\n    Since this applies recursively, if e.g. c is already created, we can be sure a and a.b. will also be already created.\n    \n    So to be able to create e, we'll have to walk the chain a.b.c.d, starting with a.\n    As soon as we encounter a module in the chain that isn't already there, we'll have to create the remainder (tail) of the chain.\n    \n    e.g.\n        import a.b.c.d.e\n        import a.b.c\n    \n    will generate\n        var modules = {};\n        __nest__ (a, 'b.c.d.e', __init__ (__world__.a.b.c.d.e));\n        __nest__ (a, 'b.c', __init__ (__world__.a.b.c));\n        \n    The task of the __nest__ function is to start at the head object and then walk to the chain of objects behind it (tail),\n    creating the ones that do not exist already, and insert the necessary module reference attributes into them.   \n    */\n    \n    var __nest__ = function (headObject, tailNames, value) {    \n        var current = headObject;\n        // In some cases this will be <main function>.__all__,\n        // which is the main module and is also known under the synonym <main function.__world__.\n        // N.B. <main function> is the entry point of a Transcrypt application,\n        // Carrying the same name as the application except the file name extension.\n        \n        if (tailNames != '') {  // Split on empty string doesn't give empty list\n            // Find the last already created object in tailNames\n            var tailChain = tailNames.split ('.');\n            var firstNewIndex = tailChain.length;\n            for (var index = 0; index < tailChain.length; index++) {\n                if (!current.hasOwnProperty (tailChain [index])) {\n                    firstNewIndex = index;\n                    break;\n                }\n                current = current [tailChain [index]];\n            }\n            \n            // Create the rest of the objects, if any\n            for (var index = firstNewIndex; index < tailChain.length; index++) {\n                current [tailChain [index]] = {};\n                current = current [tailChain [index]];\n            }\n        }\n        \n        // Insert it new attributes, it may have been created earlier and have other attributes\n        for (var attrib in value) {\n            current [attrib] = value [attrib];          \n        }       \n    };\n    __all__.__nest__ = __nest__;\n    \n    // Initialize module if not yet done and return its globals\n    var __init__ = function (module) {\n        if (!module.__inited__) {\n            module.__all__.__init__ (module.__all__);\n            module.__inited__ = true;\n        }\n        return module.__all__;\n    };\n    __all__.__init__ = __init__;\n    \n    \n__pragma__ ('ifdef', '__esv6__')\n    // Proxy switch, controlled by __pragma__ ('proxy') and __pragma ('noproxy')\n    var __proxy__ = false;  // No use assigning it to __all__, only its transient state is important\n__pragma__ ('endif')\n    \n    \n    // Since we want to assign functions, a = b.f should make b.f produce a bound function\n    // So __get__ should be called by a property rather then a function\n    // Factory __get__ creates one of three curried functions for func\n    // Which one is produced depends on what's to the left of the dot of the corresponding JavaScript property\n    var __get__ = function (self, func, quotedFuncName) {\n        if (self) {\n            if (self.hasOwnProperty ('__class__') || typeof self == 'string' || self instanceof String) {           // Object before the dot\n                if (quotedFuncName) {                                   // Memoize call since fcall is on, by installing bound function in instance\n                    Object.defineProperty (self, quotedFuncName, {      // Will override the non-own property, next time it will be called directly\n                        value: function () {                            // So next time just call curry function that calls function\n                            var args = [] .slice.apply (arguments);\n                            return func.apply (null, [self] .concat (args));\n                        },              \n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                }\n                return function () {                                    // Return bound function, code dupplication for efficiency if no memoizing\n                    var args = [] .slice.apply (arguments);             // So multilayer search prototype, apply __get__, call curry func that calls func\n                    return func.apply (null, [self] .concat (args));\n                };\n            }\n            else {                                                      // Class before the dot\n                return func;                                            // Return static method\n            }\n        }\n        else {                                                          // Nothing before the dot\n            return func;                                                // Return free function\n        }\n    }\n    __all__.__get__ = __get__;\n\n    var __getcm__ = function (self, func, quotedFuncName) {\n        if (self.hasOwnProperty ('__class__')) {\n            return function () {\n                var args = [] .slice.apply (arguments);\n                return func.apply (null, [self.__class__] .concat (args));\n            };\n        }\n        else {\n            return function () {\n                var args = [] .slice.apply (arguments);\n                return func.apply (null, [self] .concat (args));\n            };\n        }\n    }\n    __all__.__getcm__ = __getcm__;\n    \n    var __getsm__ = function (self, func, quotedFuncName) {\n        return func;\n    }\n    __all__.__getsm__ = __getsm__;\n        \n    // Mother of all metaclasses        \n    var py_metatype = {\n        __name__: 'type',\n        __bases__: [],\n        \n        // Overridable class creation worker\n        __new__: function (meta, name, bases, attribs) {\n            // Create the class cls, a functor, which the class creator function will return\n            var cls = function () {                     // If cls is called with arg0, arg1, etc, it calls its __new__ method with [arg0, arg1, etc]\n                var args = [] .slice.apply (arguments); // It has a __new__ method, not yet but at call time, since it is copied from the parent in the loop below\n                return cls.__new__ (args);              // Each Python class directly or indirectly derives from object, which has the __new__ method\n            };                                          // If there are no bases in the Python source, the compiler generates [object] for this parameter\n            \n            // Copy all methods, including __new__, properties and static attributes from base classes to new cls object\n            // The new class object will simply be the prototype of its instances\n            // JavaScript prototypical single inheritance will do here, since any object has only one class\n            // This has nothing to do with Python multiple inheritance, that is implemented explictly in the copy loop below\n            for (var index = bases.length - 1; index >= 0; index--) {   // Reversed order, since class vars of first base should win\n                var base = bases [index];\n                for (var attrib in base) {\n                    var descrip = Object.getOwnPropertyDescriptor (base, attrib);\n                    Object.defineProperty (cls, attrib, descrip);\n                }           \n__pragma__ ('ifdef', '__esv6__')\n\n                for (var symbol of Object.getOwnPropertySymbols (base)) {\n                    var descrip = Object.getOwnPropertyDescriptor (base, symbol);\n                    Object.defineProperty (cls, symbol, descrip);\n                }\n                \n__pragma__ ('endif')\n            }\n            \n            // Add class specific attributes to the created cls object\n            cls.__metaclass__ = meta;\n            cls.__name__ = name.startsWith ('py_') ? name.slice (3) : name;\n            cls.__bases__ = bases;\n            \n            // Add own methods, properties and own static attributes to the created cls object\n            for (var attrib in attribs) {\n                var descrip = Object.getOwnPropertyDescriptor (attribs, attrib);\n                Object.defineProperty (cls, attrib, descrip);\n            }\n__pragma__ ('ifdef', '__esv6__')\n\n            for (var symbol of Object.getOwnPropertySymbols (attribs)) {\n                var descrip = Object.getOwnPropertyDescriptor (attribs, symbol);\n                Object.defineProperty (cls, symbol, descrip);\n            }\n            \n__pragma__ ('endif')\n            // Return created cls object\n            return cls;\n        }\n    };\n    py_metatype.__metaclass__ = py_metatype;\n    __all__.py_metatype = py_metatype;\n    \n    // Mother of all classes\n    var object = {\n        __init__: function (self) {},\n        \n        __metaclass__: py_metatype, // By default, all classes have metaclass type, since they derive from object\n        __name__: 'object',\n        __bases__: [],\n            \n        // Object creator function, is inherited by all classes (so could be global)\n        __new__: function (args) {  // Args are just the constructor args       \n            // In JavaScript the Python class is the prototype of the Python object\n            // In this way methods and static attributes will be available both with a class and an object before the dot\n            // The descriptor produced by __get__ will return the right method flavor\n            var instance = Object.create (this, {__class__: {value: this, enumerable: true}});\n            \n__pragma__ ('ifdef', '__esv6__')\n            if ('__getattr__' in this || '__setattr__' in this) {\n                instance = new Proxy (instance, {\n                    get: function (target, name) {\n                        var result = target [name];\n                        if (result == undefined) {  // Target doesn't have attribute named name\n                            return target.__getattr__ (name);\n                        }\n                        else {\n                            return result;\n                        }\n                    },\n                    set: function (target, name, value) {\n                        try {\n                            target.__setattr__ (name, value);\n                        }\n                        catch (exception) {         // Target doesn't have a __setattr__ method\n                            target [name] = value;\n                        }\n                        return true;\n                    }\n                })\n            }\n__pragma__ ('endif')\n\n            // Call constructor\n            this.__init__.apply (null, [instance] .concat (args));\n\n            // Return constructed instance\n            return instance;\n        }   \n    };\n    __all__.object = object;\n    \n    // Class creator facade function, calls class creation worker\n    var __class__ = function (name, bases, attribs, meta) {         // Parameter meta is optional\n        if (meta == undefined) {\n            meta = bases [0] .__metaclass__;\n        }\n                \n        return meta.__new__ (meta, name, bases, attribs);\n    }\n    __all__.__class__ = __class__;\n    \n    // Define __pragma__ to preserve '<all>' and '</all>', since it's never generated as a function, must be done early, so here\n    var __pragma__ = function () {};\n    __all__.__pragma__ = __pragma__;\n    \n    ",
		"# This module is avaible both in the Python and Transcrypt environments\n# It is included in-between the __core__ and the __builtin__ module, so the latter can adapt __envir__\n# In Transcrypt, __base__ is available inline, it isn't nested and cannot be imported in the normal way\n\nclass __Envir__:\n    def __init__ (self):\n        self.interpreter_name = 'python'\n        self.transpiler_name = 'transcrypt'\n        self.transpiler_version = '3.6.67'\n        self.target_subdir = '__javascript__'\n        \n__envir__ = __Envir__ ()",
		"# This module is avaible solely in the Transcrypt environment\n# It is included after the __builtin__ module, since it uses its facilities\n# In Transcrypt, __standard__ is available inline, it isn't nested and cannot be imported in the normal way\n\n__pragma__ ('skip')\ncopy = Math = __typeof__ = __repr__ = document = console = window = 0\n__pragma__ ('noskip')\n\n__pragma__ ('notconv')  # !!! tconv gives a problem with __terminal__, needs investigation\n__pragma__ ('nokwargs')\n__pragma__ ('noalias', 'sort')\n\nclass Exception:\n    __pragma__ ('kwargs')\n    def __init__ (self, *args, **kwargs):\n        self.__args__ = args\n        try:\n            self.stack = kwargs.error.stack # Integrate with JavaScript Error object\n        except:\n            self.stack = 'No stack trace available'\n    __pragma__ ('nokwargs')\n        \n    def __repr__ (self):\n        if len (self.__args__):\n            return '{}{}'.format (self.__class__.__name__, repr (tuple (self.__args__)))\n        else:\n            return '{}()'.format (self.__class__.__name__)\n            \n    def __str__ (self):\n        if len (self.__args__) > 1:\n            return str (tuple (self.__args__))\n        elif len (self.__args__):\n            return str (self.__args__ [0])\n        else:\n            return ''\n        \nclass IterableError (Exception):\n    def __init__ (self, error):\n        Exception.__init__ (self, 'Can\\'t iterate over non-iterable', error = error)\n            \nclass StopIteration (Exception):\n    def __init__ (self, error):\n        Exception.__init__ (self, 'Iterator exhausted', error = error)\n        \nclass ValueError (Exception):\n    def __init__ (self, message, error):\n        Exception.__init__ (self, message, error = error)\n    \nclass KeyError (Exception):\n    def __init__ (self, message, error):\n        Exception.__init__ (self, message, error = error)\n    \nclass AssertionError (Exception):\n    def __init__ (self, message, error):\n        if message:\n            Exception.__init__ (self, message, error = error)\n        else:\n            Exception.__init__ (self, error = error)\n\nclass NotImplementedError (Exception):\n    def __init__(self, message, error):\n        Exception.__init__(self, message, error = error)\n\nclass IndexError (Exception):\n    def __init__(self, message, error):\n        Exception.__init__(self, message, error = error)\n\nclass AttributeError (Exception):\n    def __init__(self, message, error):\n        Exception.__init__(self, message, error = error)\n\nclass TypeError (Exception):\n    def __init__(self, message, error):\n        Exception.__init__(self, message, error = error)\n\n# Warnings Exceptions\n# N.B. This is a limited subset of the warnings defined in\n# the cpython implementation to keep things small for now.\n\nclass Warning (Exception):\n    ''' Warning Base Class\n    '''\n    pass\n\nclass UserWarning (Warning):\n    pass\n\nclass DeprecationWarning (Warning):\n    pass\n\nclass RuntimeWarning (Warning):\n    pass\n\n__pragma__ ('kwargs')\n\ndef __sort__ (iterable, key = None, reverse = False):               # Used by py_sort, can deal with kwargs\n    if key:\n        iterable.sort (lambda a, b: 1 if key (a) > key (b) else -1) # JavaScript sort, case '==' is irrelevant for sorting\n    else:\n        iterable.sort ()                                            # JavaScript sort\n        \n    if reverse:\n        iterable.reverse ()\n        \ndef sorted (iterable, key = None, reverse = False):\n    if type (iterable) == dict:\n        result = copy (iterable.keys ()) \n    else:       \n        result = copy (iterable)\n        \n    __sort__ (result, key, reverse)\n    return result\n\n__pragma__ ('nokwargs')\n\ndef map (func, iterable):\n    return [func (item) for item in iterable]\n\n\ndef filter (func, iterable):\n    if func == None:\n        func = bool\n    return [item for item in iterable if func (item)]\n    \n__pragma__ ('ifdef', '__complex__')\nclass complex:\n    def __init__ (self, real, imag = None):\n        if imag == None:\n            if type (real) == complex:\n                self.real = real.real\n                self.imag = real.imag\n            else:\n                self.real = real\n                self.imag = 0\n        else:\n            self.real = real\n            self.imag = imag\n            \n    def __neg__ (self):\n        return complex (-self.real, -self.imag)\n        \n    def __exp__ (self):\n        modulus = Math.exp (self.real)\n        return complex (modulus * Math.cos (self.imag), modulus * Math.sin (self.imag))\n    \n    def __log__ (self):\n        return complex (Math.log (Math.sqrt (self.real * self.real + self.imag * self.imag)), Math.atan2 (self.imag, self.real))\n        \n    def __pow__ (self, other):  # a ** b = exp (b log a)\n        return (self.__log__ () .__mul__ (other)) .__exp__ ()\n        \n    def __rpow__ (self, real):  # real ** comp -> comp.__rpow__ (real)\n        return self.__mul__ (Math.log (real)) .__exp__ ()\n        \n    def __mul__ (self, other):\n        if __typeof__ (other) is 'number':\n            return complex (self.real * other, self.imag * other)\n        else:\n            return complex (self.real * other.real - self.imag * other.imag, self.real * other.imag + self.imag * other.real)\n        \n    def __rmul__ (self, real):  # real + comp -> comp.__rmul__ (real)\n        return complex (self.real * real, self.imag * real)\n        \n    def __div__ (self, other):\n        if __typeof__ (other) is 'number':\n            return complex (self.real / other, self.imag / other)\n        else:\n            denom = other.real * other.real + other.imag * other.imag\n            return complex (\n                (self.real * other.real + self.imag * other.imag) / denom,\n                (self.imag * other.real - self.real * other.imag) / denom\n            )\n        \n    def __rdiv__ (self, real):  # real / comp -> comp.__rdiv__ (real)\n        denom = self.real * self.real\n        return complex (\n            (real * self.real) / denom,\n            (real * self.imag) / denom\n        )\n        \n    def __add__ (self, other):\n        if __typeof__ (other) is 'number':\n            return complex (self.real + other, self.imag)\n        else:   # Assume other is complex\n            return complex (self.real + other.real, self.imag + other.imag)\n        \n    def __radd__ (self, real):  # real + comp -> comp.__radd__ (real)\n        return complex (self.real + real, self.imag)\n        \n    def __sub__ (self, other):\n        if __typeof__ (other) is 'number':\n            return complex (self.real - other, self.imag)\n        else:\n            return complex (self.real - other.real, self.imag - other.imag)\n        \n    def __rsub__ (self, real):  # real - comp -> comp.__rsub__ (real)\n        return complex (real - self.real, -self.imag)\n        \n    def __repr__ (self):\n        return '({}{}{}j)'.format (self.real, '+' if self.imag >= 0 else '', self.imag)\n            \n    def __str__ (self):\n        return __repr__ (self) [1 : -1]\n        \n__pragma__ ('endif')\n\nclass __Terminal__:\n    '''\n    Printing to either the console or to html happens async, but is blocked by calling window.prompt.\n    So while all input and print statements are encountered in normal order, the print's exit immediately without yet having actually printed\n    This means the next input takes control, blocking actual printing and so on indefinitely\n    The effect is that everything's only printed after all inputs are done\n    To prevent that, what's needed is to only execute the next window.prompt after actual printing has been done\n    Since we've no way to find out when that is, a timeout is used.\n    '''\n\n    def __init__ (self):\n        self.buffer = ''\n    \n        try:\n            self.element = document.getElementById ('__terminal__')\n        except:\n            self.element = None\n            \n        if self.element:\n            self.element.style.overflowX = 'auto'\n            self.element.style.boxSizing = 'border-box'\n            self.element.style.padding = '5px'\n            self.element.innerHTML = '_'\n        \n    __pragma__ ('kwargs')\n        \n    def print (self, *args, sep = ' ', end = '\\n'):\n        self.buffer = '{}{}{}'.format (self.buffer, sep.join ([str (arg) for arg in args]), end) [-4096 : ] \n        \n        if self.element:\n            self.element.innerHTML = self.buffer.replace ('\\n', '<br>') .replace (' ', '&nbsp')\n            self.element.scrollTop = self.element.scrollHeight\n        else:\n            console.log (sep.join ([str (arg) for arg in args]))\n        \n    def input (self, question):\n        self.print ('{}'.format (question), end = '')\n        answer = window.prompt ('\\n'.join (self.buffer.split ('\\n') [-16:]))\n        self.print (answer)\n        return answer\n        \n    __pragma__ ('nokwargs')\n    \n__terminal__ = __Terminal__ ()\n",
		"    var __call__ = function (/* <callee>, <this>, <params>* */) {   // Needed for __base__ and __standard__ if global 'opov' switch is on\n        var args = [] .slice.apply (arguments);\n        if (typeof args [0] == 'object' && '__call__' in args [0]) {        // Overloaded\n            return args [0] .__call__ .apply (args [1], args.slice (2));\n        }\n        else {                                                              // Native\n            return args [0] .apply (args [1], args.slice (2));\n        }\n    };\n    __all__.__call__ = __call__;\n\n    // Initialize non-nested modules __base__ and __standard__ and make its names available directly and via __all__\n    // They can't do that itself, because they're regular Python modules\n    // The compiler recognizes their names and generates them inline rather than nesting them\n    // In this way it isn't needed to import them everywhere\n\n    // __base__\n\n    __nest__ (__all__, '', __init__ (__all__.org.transcrypt.__base__));\n    var __envir__ = __all__.__envir__;\n\n    // __standard__\n\n    __nest__ (__all__, '', __init__ (__all__.org.transcrypt.__standard__));\n\n    var Exception = __all__.Exception;\n    var IterableError = __all__.IterableError;\n    var StopIteration = __all__.StopIteration;\n    var ValueError = __all__.ValueError;\n    var KeyError = __all__.KeyError;\n    var AssertionError = __all__.AssertionError;\n    var NotImplementedError = __all__.NotImplementedError;\n    var IndexError = __all__.IndexError;\n    var AttributeError = __all__.AttributeError;\n    var py_TypeError = __all__.py_TypeError;\n\n    // Warnings Exceptions\n    var Warning = __all__.Warning;\n    var UserWarning = __all__.UserWarning;\n    var DeprecationWarning = __all__.DeprecationWarning;\n    var RuntimeWarning = __all__.RuntimeWarning;\n\n    var __sort__ = __all__.__sort__;\n    var sorted = __all__.sorted;\n\n    var map = __all__.map;\n    var filter = __all__.filter;\n\n__pragma__ ('ifdef', '__complex__')\n    var complex = __all__.complex;\n__pragma__ ('endif')\n    __all__.print = __all__.__terminal__.print;\n    __all__.input = __all__.__terminal__.input;\n\n    var __terminal__ = __all__.__terminal__;\n    var print = __all__.print;\n    var input = __all__.input;\n\n    // Complete __envir__, that was created in __base__, for non-stub mode\n    __envir__.executor_name = __envir__.transpiler_name;\n\n    // Make make __main__ available in browser\n    var __main__ = {__file__: ''};\n    __all__.main = __main__;\n\n    // Define current exception, there's at most one exception in the air at any time\n    var __except__ = null;\n    __all__.__except__ = __except__;\n    \n     // Creator of a marked dictionary, used to pass **kwargs parameter\n    var __kwargtrans__ = function (anObject) {\n        anObject.__kwargtrans__ = null; // Removable marker\n        anObject.constructor = Object;\n        return anObject;\n    }\n    __all__.__kwargtrans__ = __kwargtrans__;\n\n    // 'Oneshot' dict promotor, used to enrich __all__ and help globals () return a true dict\n    var __globals__ = function (anObject) {\n        if (isinstance (anObject, dict)) {  // Don't attempt to promote (enrich) again, since it will make a copy\n            return anObject;\n        }\n        else {\n            return dict (anObject)\n        }\n    }\n    __all__.__globals__ = __globals__\n    \n    // Partial implementation of super () .<methodName> (<params>)\n    var __super__ = function (aClass, methodName) {\n        // Lean and fast, no C3 linearization, only call first implementation encountered\n        // Will allow __super__ ('<methodName>') (self, <params>) rather than only <className>.<methodName> (self, <params>)\n        \n__pragma__ ('ifdef', '__esv6__')\n        for (let base of aClass.__bases__) {\n__pragma__ ('else')\n        for (var index = 0; index < aClass.__bases__.length; index++) {\n            var base = aClass.__bases__ [index];\n__pragma__ ('endif')\n            if (methodName in base) {\n               return base [methodName];\n            }\n        }\n\n        throw new Exception ('Superclass method not found');    // !!! Improve!\n    }\n    __all__.__super__ = __super__\n        \n    // Python property installer function, no member since that would bloat classes\n    var property = function (getter, setter) {  // Returns a property descriptor rather than a property\n        if (!setter) {  // ??? Make setter optional instead of dummy?\n            setter = function () {};\n        }\n        return {get: function () {return getter (this)}, set: function (value) {setter (this, value)}, enumerable: true};\n    }\n    __all__.property = property;\n    \n    // Conditional JavaScript property installer function, prevents redefinition of properties if multiple Transcrypt apps are on one page\n    var __setProperty__ = function (anObject, name, descriptor) {\n        if (!anObject.hasOwnProperty (name)) {\n            Object.defineProperty (anObject, name, descriptor);\n        }\n    }\n    __all__.__setProperty__ = __setProperty__\n    \n    // Assert function, call to it only generated when compiling with --dassert option\n    function assert (condition, message) {  // Message may be undefined\n        if (!condition) {\n            throw AssertionError (message, new Error ());\n        }\n    }\n\n    __all__.assert = assert;\n\n    var __merge__ = function (object0, object1) {\n        var result = {};\n        for (var attrib in object0) {\n            result [attrib] = object0 [attrib];\n        }\n        for (var attrib in object1) {\n            result [attrib] = object1 [attrib];\n        }\n        return result;\n    };\n    __all__.__merge__ = __merge__;\n\n    // Manipulating attributes by name\n    \n    var dir = function (obj) {\n        var aList = [];\n        for (var aKey in obj) {\n            aList.push (aKey);\n        }\n        aList.sort ();\n        return aList;\n    };\n    __all__.dir = dir;\n\n    var setattr = function (obj, name, value) {\n        obj [name] = value;\n    };\n    __all__.setattr = setattr;\n\n    var getattr = function (obj, name) {\n        return obj [name];\n    };\n    __all__.getattr= getattr;\n\n    var hasattr = function (obj, name) {\n        try {\n            return name in obj;\n        }\n        catch (exception) {\n            return false;\n        }\n    };\n    __all__.hasattr = hasattr;\n\n    var delattr = function (obj, name) {\n        delete obj [name];\n    };\n    __all__.delattr = (delattr);\n\n    // The __in__ function, used to mimic Python's 'in' operator\n    // In addition to CPython's semantics, the 'in' operator is also allowed to work on objects, avoiding a counterintuitive separation between Python dicts and JavaScript objects\n    // In general many Transcrypt compound types feature a deliberate blend of Python and JavaScript facilities, facilitating efficient integration with JavaScript libraries\n    // If only Python objects and Python dicts are dealt with in a certain context, the more pythonic 'hasattr' is preferred for the objects as opposed to 'in' for the dicts\n    var __in__ = function (element, container) {\n        if (py_typeof (container) == dict) {        // Currently only implemented as an augmented JavaScript object\n            return container.hasOwnProperty (element);\n        }\n        else {                                      // Parameter 'element' itself is an array, string or a plain, non-dict JavaScript object\n            return (\n                container.indexOf ?                 // If it has an indexOf\n                container.indexOf (element) > -1 :  // it's an array or a string,\n                container.hasOwnProperty (element)  // else it's a plain, non-dict JavaScript object\n            );\n        }\n    };\n    __all__.__in__ = __in__;\n\n    // Find out if an attribute is special\n    var __specialattrib__ = function (attrib) {\n        return (attrib.startswith ('__') && attrib.endswith ('__')) || attrib == 'constructor' || attrib.startswith ('py_');\n    };\n    __all__.__specialattrib__ = __specialattrib__;\n\n    // Compute length of any object\n    var len = function (anObject) {\n        if (anObject === undefined || anObject === null) {\n            return 0;\n        }\n\n        if (anObject.__len__ instanceof Function) {\n            return anObject.__len__ ();\n        }\n\n        if (anObject.length !== undefined) {\n            return anObject.length;\n        }\n\n        var length = 0;\n        for (var attr in anObject) {\n            if (!__specialattrib__ (attr)) {\n                length++;\n            }\n        }\n\n        return length;\n    };\n    __all__.len = len;\n\n    // General conversions and checks\n\n    function __i__ (any) {  //  Convert to iterable\n        return py_typeof (any) == dict ? any.py_keys () : any;\n    }\n\n    function __k__ (keyed, key) {  //  Check existence of dict key via retrieved element\n        var result = keyed [key];\n        if (typeof result == 'undefined') {\n             throw KeyError (key, new Error());\n        }\n        return result;\n    }\n\n    // If the target object is somewhat true, return it. Otherwise return false.\n    // Try to follow Python conventions of truthyness\n    function __t__ (target) { \n        return (\n            // Avoid invalid checks\n            target === undefined || target === null ? false :\n            \n            // Take a quick shortcut if target is a simple type\n            ['boolean', 'number'] .indexOf (typeof target) >= 0 ? target :\n            \n            // Use __bool__ (if present) to decide if target is true\n            target.__bool__ instanceof Function ? (target.__bool__ () ? target : false) :\n            \n            // There is no __bool__, use __len__ (if present) instead\n            target.__len__ instanceof Function ?  (target.__len__ () !== 0 ? target : false) :\n            \n            // There is no __bool__ and no __len__, declare Functions true.\n            // Python objects are transpiled into instances of Function and if\n            // there is no __bool__ or __len__, the object in Python is true.\n            target instanceof Function ? target :\n            \n            // Target is something else, compute its len to decide\n            len (target) !== 0 ? target :\n            \n            // When all else fails, declare target as false\n            false\n        );\n    }\n    __all__.__t__ = __t__;\n\n    var bool = function (any) {     // Always truly returns a bool, rather than something truthy or falsy\n        return !!__t__ (any);\n    };\n    bool.__name__ = 'bool';         // So it can be used as a type with a name\n    __all__.bool = bool;\n\n    var float = function (any) {\n        if (any == 'inf') {\n            return Infinity;\n        }\n        else if (any == '-inf') {\n            return -Infinity;\n        }\n        else if (isNaN (parseFloat (any))) {    // Call to parseFloat needed to exclude '', ' ' etc.\n            if (any === false) {\n                return 0;\n            }\n            else if (any === true) {\n                return 1;\n            }\n            else {  // Needed e.g. in autoTester.check, so \"return any ? true : false\" won't do\n                throw ValueError (\"could not convert string to float: '\" + str(any) + \"'\", new Error ());\n            }\n        }\n        else {\n            return +any;\n        }\n    };\n    float.__name__ = 'float';\n    __all__.float = float;\n\n    var int = function (any) {\n        return float (any) | 0\n    };\n    int.__name__ = 'int';\n    __all__.int = int;\n\n    var py_typeof = function (anObject) {\n        var aType = typeof anObject;\n        if (aType == 'object') {    // Directly trying '__class__ in anObject' turns out to wreck anObject in Chrome if its a primitive\n            try {\n                return anObject.__class__;\n            }\n            catch (exception) {\n                return aType;\n            }\n        }\n        else {\n            return (    // Odly, the braces are required here\n                aType == 'boolean' ? bool :\n                aType == 'string' ? str :\n                aType == 'number' ? (anObject % 1 == 0 ? int : float) :\n                null\n            );\n        }\n    };\n    __all__.py_typeof = py_typeof;\n\n    var isinstance = function (anObject, classinfo) {\n        function isA (queryClass) {\n            if (queryClass == classinfo) {\n                return true;\n            }\n            for (var index = 0; index < queryClass.__bases__.length; index++) {\n                if (isA (queryClass.__bases__ [index], classinfo)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        if (classinfo instanceof Array) {   // Assume in most cases it isn't, then making it recursive rather than two functions saves a call\n__pragma__ ('ifdef', '__esv6__')\n            for (let aClass of classinfo) {\n__pragma__ ('else')\n            for (var index = 0; index < classinfo.length; index++) {\n                var aClass = classinfo [index];\n__pragma__ ('endif')\n                if (isinstance (anObject, aClass)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        try {                   // Most frequent use case first\n            return '__class__' in anObject ? isA (anObject.__class__) : anObject instanceof classinfo;\n        }\n        catch (exception) {     // Using isinstance on primitives assumed rare\n            var aType = py_typeof (anObject);\n            return aType == classinfo || (aType == bool && classinfo == int);\n        }\n    };\n    __all__.isinstance = isinstance;\n\n    var callable = function (anObject) {\n        if ( typeof anObject == 'object' && '__call__' in anObject ) {\n            return true;\n        }\n        else {\n            return typeof anObject === 'function';\n        }\n    };\n    __all__.callable = callable;\n\n    // Repr function uses __repr__ method, then __str__, then toString\n    var repr = function (anObject) {\n        try {\n            return anObject.__repr__ ();\n        }\n        catch (exception) {\n            try {\n                return anObject.__str__ ();\n            }\n            catch (exception) { // anObject has no __repr__ and no __str__\n                try {\n                    if (anObject == null) {\n                        return 'None';\n                    }\n                    else if (anObject.constructor == Object) {\n                        var result = '{';\n                        var comma = false;\n                        for (var attrib in anObject) {\n                            if (!__specialattrib__ (attrib)) {\n                                if (attrib.isnumeric ()) {\n                                    var attribRepr = attrib;                // If key can be interpreted as numerical, we make it numerical\n                                }                                           // So we accept that '1' is misrepresented as 1\n                                else {\n                                    var attribRepr = '\\'' + attrib + '\\'';  // Alpha key in dict\n                                }\n\n                                if (comma) {\n                                    result += ', ';\n                                }\n                                else {\n                                    comma = true;\n                                }\n                                result += attribRepr + ': ' + repr (anObject [attrib]);\n                            }\n                        }\n                        result += '}';\n                        return result;\n                    }\n                    else {\n                        return typeof anObject == 'boolean' ? anObject.toString () .capitalize () : anObject.toString ();\n                    }\n                }\n                catch (exception) {\n                    return '<object of type: ' + typeof anObject + '>';\n                }\n            }\n        }\n    };\n    __all__.repr = repr;\n\n    // Char from Unicode or ASCII\n    var chr = function (charCode) {\n        return String.fromCharCode (charCode);\n    };\n    __all__.chr = chr;\n\n    // Unicode or ASCII from char\n    var ord = function (aChar) {\n        return aChar.charCodeAt (0);\n    };\n    __all__.ord = ord;\n\n    // Maximum of n numbers\n    var max = Math.max;\n    __all__.max = max;\n\n    // Minimum of n numbers\n    var min = Math.min;\n    __all__.min = min;\n\n    // Absolute value\n__pragma__ ('ifdef', '__complex__')\n    var abs = function (x) {\n        try {\n            return Math.abs (x);\n        }\n        catch (exception) {\n            return Math.sqrt (x.real * x.real + x.imag * x.imag);\n        }\n    };\n__pragma__ ('else')\n    var abs = Math.abs;\n    __all__.abs = abs;\n__pragma__ ('endif')\n\n    // Bankers rounding\n    var round = function (number, ndigits) {\n        if (ndigits) {\n            var scale = Math.pow (10, ndigits);\n            number *= scale;\n        }\n\n        var rounded = Math.round (number);\n        if (rounded - number == 0.5 && rounded % 2) {   // Has rounded up to odd, should have rounded down to even\n            rounded -= 1;\n        }\n\n        if (ndigits) {\n            rounded /= scale;\n        }\n\n        return rounded;\n    };\n    __all__.round = round;\n\n    // BEGIN unified iterator model\n\n    function __jsUsePyNext__ () {       // Add as 'next' method to make Python iterator JavaScript compatible\n        try {\n            var result = this.__next__ ();\n            return {value: result, done: false};\n        }\n        catch (exception) {\n            return {value: undefined, done: true};\n        }\n    }\n\n    function __pyUseJsNext__ () {       // Add as '__next__' method to make JavaScript iterator Python compatible\n        var result = this.next ();\n        if (result.done) {\n            throw StopIteration (new Error ());\n        }\n        else {\n            return result.value;\n        }\n    }\n\n    function py_iter (iterable) {                   // Alias for Python's iter function, produces a universal iterator / iterable, usable in Python and JavaScript\n        if (typeof iterable == 'string' || '__iter__' in iterable) {    // JavaScript Array or string or Python iterable (string has no 'in')\n            var result = iterable.__iter__ ();                          // Iterator has a __next__\n            result.next = __jsUsePyNext__;                              // Give it a next\n        }\n        else if ('selector' in iterable) {                              // Assume it's a JQuery iterator\n            var result = list (iterable) .__iter__ ();                  // Has a __next__\n            result.next = __jsUsePyNext__;                              // Give it a next\n        }\n        else if ('next' in iterable) {                                  // It's a JavaScript iterator already,  maybe a generator, has a next and may have a __next__\n            var result = iterable\n            if (! ('__next__' in result)) {                             // If there's no danger of recursion\n                result.__next__ = __pyUseJsNext__;                      // Give it a __next__\n            }\n        }\n        else if (Symbol.iterator in iterable) {                         // It's a JavaScript iterable such as a typed array, but not an iterator\n            var result = iterable [Symbol.iterator] ();                 // Has a next\n            result.__next__ = __pyUseJsNext__;                          // Give it a __next__\n        }\n        else {\n            throw IterableError (new Error ()); // No iterator at all\n        }\n        result [Symbol.iterator] = function () {return result;};\n        return result;\n    }\n\n    function py_next (iterator) {               // Called only in a Python context, could receive Python or JavaScript iterator\n        try {                                   // Primarily assume Python iterator, for max speed\n            var result = iterator.__next__ ();\n        }\n        catch (exception) {                     // JavaScript iterators are the exception here\n            var result = iterator.next ();\n            if (result.done) {\n                throw StopIteration (new Error ());\n            }\n            else {\n                return result.value;\n            }\n        }\n        if (result == undefined) {\n            throw StopIteration (new Error ());\n        }\n        else {\n            return result;\n        }\n    }\n\n    function __PyIterator__ (iterable) {\n        this.iterable = iterable;\n        this.index = 0;\n    }\n\n    __PyIterator__.prototype.__next__ = function () {\n        if (this.index < this.iterable.length) {\n            return this.iterable [this.index++];\n        }\n        else {\n            throw StopIteration (new Error ());\n        }\n    };\n\n    function __JsIterator__ (iterable) {\n        this.iterable = iterable;\n        this.index = 0;\n    }\n\n    __JsIterator__.prototype.next = function () {\n        if (this.index < this.iterable.py_keys.length) {\n            return {value: this.index++, done: false};\n        }\n        else {\n            return {value: undefined, done: true};\n        }\n    };\n\n    // END unified iterator model\n\n    // Reversed function for arrays\n    var py_reversed = function (iterable) {\n        iterable = iterable.slice ();\n        iterable.reverse ();\n        return iterable;\n    };\n    __all__.py_reversed = py_reversed;\n\n    // Zip method for arrays and strings\n    var zip = function () {\n        var args = [] .slice.call (arguments);\n        for (var i = 0; i < args.length; i++) {\n            if (typeof args [i] == 'string') {\n                args [i] = args [i] .split ('');\n            }\n            else if (!Array.isArray (args [i])) {\n                args [i] = Array.from (args [i]);\n            }\n        }\n        var shortest = args.length == 0 ? [] : args.reduce (    // Find shortest array in arguments\n            function (array0, array1) {\n                return array0.length < array1.length ? array0 : array1;\n            }\n        );\n        return shortest.map (                   // Map each element of shortest array\n            function (current, index) {         // To the result of this function\n                return args.map (               // Map each array in arguments\n                    function (current) {        // To the result of this function\n                        return current [index]; // Namely it's index't entry\n                    }\n                );\n            }\n        );\n    };\n    __all__.zip = zip;\n\n    // Range method, returning an array\n    function range (start, stop, step) {\n        if (stop == undefined) {\n            // one param defined\n            stop = start;\n            start = 0;\n        }\n        if (step == undefined) {\n            step = 1;\n        }\n        if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n            return [];\n        }\n        var result = [];\n        for (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n            result.push(i);\n        }\n        return result;\n    };\n    __all__.range = range;\n\n    // Any, all and sum\n\n__pragma__ ('ifdef', '__esv6__')\n    function any (iterable) {\n        for (let item of iterable) {\n            if (bool (item)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function all (iterable) {\n        for (let item of iterable) {\n            if (! bool (item)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function sum (iterable) {\n        let result = 0;\n        for (let item of iterable) {\n            result += item;\n        }\n        return result;\n    }\n__pragma__ ('else')\n    function any (iterable) {\n        for (var index = 0; index < iterable.length; index++) {\n            if (bool (iterable [index])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function all (iterable) {\n        for (var index = 0; index < iterable.length; index++) {\n            if (! bool (iterable [index])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function sum (iterable) {\n        var result = 0;\n        for (var index = 0; index < iterable.length; index++) {\n            result += iterable [index];\n        }\n        return result;\n    }\n__pragma__ ('endif')\n\n    __all__.any = any;\n    __all__.all = all;\n    __all__.sum = sum;\n\n    // Enumerate method, returning a zipped list\n    function enumerate (iterable) {\n        return zip (range (len (iterable)), iterable);\n    }\n    __all__.enumerate = enumerate;\n\n    // Shallow and deepcopy\n\n    function copy (anObject) {\n        if (anObject == null || typeof anObject == \"object\") {\n            return anObject;\n        }\n        else {\n            var result = {};\n            for (var attrib in obj) {\n                if (anObject.hasOwnProperty (attrib)) {\n                    result [attrib] = anObject [attrib];\n                }\n            }\n            return result;\n        }\n    }\n    __all__.copy = copy;\n\n    function deepcopy (anObject) {\n        if (anObject == null || typeof anObject == \"object\") {\n            return anObject;\n        }\n        else {\n            var result = {};\n            for (var attrib in obj) {\n                if (anObject.hasOwnProperty (attrib)) {\n                    result [attrib] = deepcopy (anObject [attrib]);\n                }\n            }\n            return result;\n        }\n    }\n    __all__.deepcopy = deepcopy;\n\n    // List extensions to Array\n\n    function list (iterable) {                                      // All such creators should be callable without new\n__pragma__ ('ifdef', '__esv6__')\n        var instance = iterable ? Array.from (iterable) : [];\n__pragma__ ('else')\n        var instance = iterable ? [] .slice.apply (iterable) : [];  // Spread iterable, n.b. array.slice (), so array before dot\n__pragma__ ('endif')\n        // Sort is the normal JavaScript sort, Python sort is a non-member function\n        return instance;\n    }\n    __all__.list = list;\n    Array.prototype.__class__ = list;   // All arrays are lists (not only if constructed by the list ctor), unless constructed otherwise\n    list.__name__ = 'list';\n\n    /*\n    Array.from = function (iterator) { // !!! remove\n        result = [];\n        for (item of iterator) {\n            result.push (item);\n        }\n        return result;\n    }\n    */\n\n    Array.prototype.__iter__ = function () {return new __PyIterator__ (this);};\n\n    Array.prototype.__getslice__ = function (start, stop, step) {\n        if (start < 0) {\n            start = this.length + start;\n        }\n\n        if (stop == null) {\n            stop = this.length;\n        }\n        else if (stop < 0) {\n            stop = this.length + stop;\n        }\n        else if (stop > this.length) {\n            stop = this.length;\n        }\n\n        var result = list ([]);\n        for (var index = start; index < stop; index += step) {\n            result.push (this [index]);\n        }\n\n        return result;\n    };\n\n    Array.prototype.__setslice__ = function (start, stop, step, source) {\n        if (start < 0) {\n            start = this.length + start;\n        }\n\n        if (stop == null) {\n            stop = this.length;\n        }\n        else if (stop < 0) {\n            stop = this.length + stop;\n        }\n\n        if (step == null) { // Assign to 'ordinary' slice, replace subsequence\n            Array.prototype.splice.apply (this, [start, stop - start] .concat (source));\n        }\n        else {              // Assign to extended slice, replace designated items one by one\n            var sourceIndex = 0;\n            for (var targetIndex = start; targetIndex < stop; targetIndex += step) {\n                this [targetIndex] = source [sourceIndex++];\n            }\n        }\n    };\n\n    Array.prototype.__repr__ = function () {\n        if (this.__class__ == set && !this.length) {\n            return 'set()';\n        }\n\n        var result = !this.__class__ || this.__class__ == list ? '[' : this.__class__ == tuple ? '(' : '{';\n\n        for (var index = 0; index < this.length; index++) {\n            if (index) {\n                result += ', ';\n            }\n            result += repr (this [index]);\n        }\n\n        if (this.__class__ == tuple && this.length == 1) {\n            result += ',';\n        }\n\n        result += !this.__class__ || this.__class__ == list ? ']' : this.__class__ == tuple ? ')' : '}';;\n        return result;\n    };\n\n    Array.prototype.__str__ = Array.prototype.__repr__;\n\n    Array.prototype.append = function (element) {\n        this.push (element);\n    };\n\n    Array.prototype.py_clear = function () {\n        this.length = 0;\n    };\n\n    Array.prototype.extend = function (aList) {\n        this.push.apply (this, aList);\n    };\n\n    Array.prototype.insert = function (index, element) {\n        this.splice (index, 0, element);\n    };\n\n    Array.prototype.remove = function (element) {\n        var index = this.indexOf (element);\n        if (index == -1) {\n            throw ValueError (\"list.remove(x): x not in list\", new Error ());\n        }\n        this.splice (index, 1);\n    };\n\n    Array.prototype.index = function (element) {\n        return this.indexOf (element);\n    };\n\n    Array.prototype.py_pop = function (index) {\n        if (index == undefined) {\n            return this.pop ();  // Remove last element\n        }\n        else {\n            return this.splice (index, 1) [0];\n        }\n    };\n\n    Array.prototype.py_sort = function () {\n        __sort__.apply  (null, [this].concat ([] .slice.apply (arguments)));    // Can't work directly with arguments\n        // Python params: (iterable, key = None, reverse = False)\n        // py_sort is called with the Transcrypt kwargs mechanism, and just passes the params on to __sort__\n        // __sort__ is def'ed with the Transcrypt kwargs mechanism\n    };\n\n    Array.prototype.__add__ = function (aList) {\n        return list (this.concat (aList));\n    };\n\n    Array.prototype.__mul__ = function (scalar) {\n        var result = this;\n        for (var i = 1; i < scalar; i++) {\n            result = result.concat (this);\n        }\n        return result;\n    };\n\n    Array.prototype.__rmul__ = Array.prototype.__mul__;\n\n    // Tuple extensions to Array\n\n    function tuple (iterable) {\n        var instance = iterable ? [] .slice.apply (iterable) : [];\n        instance.__class__ = tuple; // Not all arrays are tuples\n        return instance;\n    }\n    __all__.tuple = tuple;\n    tuple.__name__ = 'tuple';\n\n    // Set extensions to Array\n    // N.B. Since sets are unordered, set operations will occasionally alter the 'this' array by sorting it\n\n    function set (iterable) {\n        var instance = [];\n        if (iterable) {\n            for (var index = 0; index < iterable.length; index++) {\n                instance.add (iterable [index]);\n            }\n        }\n        instance.__class__ = set;   // Not all arrays are sets\n        return instance;\n    }\n    __all__.set = set;\n    set.__name__ = 'set';\n\n    Array.prototype.__bindexOf__ = function (element) { // Used to turn O (n^2) into O (n log n)\n    // Since sorting is lex, compare has to be lex. This also allows for mixed lists\n\n        element += '';\n\n        var mindex = 0;\n        var maxdex = this.length - 1;\n\n        while (mindex <= maxdex) {\n            var index = (mindex + maxdex) / 2 | 0;\n            var middle = this [index] + '';\n\n            if (middle < element) {\n                mindex = index + 1;\n            }\n            else if (middle > element) {\n                maxdex = index - 1;\n            }\n            else {\n                return index;\n            }\n        }\n\n        return -1;\n    };\n\n    Array.prototype.add = function (element) {\n        if (this.indexOf (element) == -1) { // Avoid duplicates in set\n            this.push (element);\n        }\n    };\n\n    Array.prototype.discard = function (element) {\n        var index = this.indexOf (element);\n        if (index != -1) {\n            this.splice (index, 1);\n        }\n    };\n\n    Array.prototype.isdisjoint = function (other) {\n        this.sort ();\n        for (var i = 0; i < other.length; i++) {\n            if (this.__bindexOf__ (other [i]) != -1) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    Array.prototype.issuperset = function (other) {\n        this.sort ();\n        for (var i = 0; i < other.length; i++) {\n            if (this.__bindexOf__ (other [i]) == -1) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    Array.prototype.issubset = function (other) {\n        return set (other.slice ()) .issuperset (this); // Sort copy of 'other', not 'other' itself, since it may be an ordered sequence\n    };\n\n    Array.prototype.union = function (other) {\n        var result = set (this.slice () .sort ());\n        for (var i = 0; i < other.length; i++) {\n            if (result.__bindexOf__ (other [i]) == -1) {\n                result.push (other [i]);\n            }\n        }\n        return result;\n    };\n\n    Array.prototype.intersection = function (other) {\n        this.sort ();\n        var result = set ();\n        for (var i = 0; i < other.length; i++) {\n            if (this.__bindexOf__ (other [i]) != -1) {\n                result.push (other [i]);\n            }\n        }\n        return result;\n    };\n\n    Array.prototype.difference = function (other) {\n        var sother = set (other.slice () .sort ());\n        var result = set ();\n        for (var i = 0; i < this.length; i++) {\n            if (sother.__bindexOf__ (this [i]) == -1) {\n                result.push (this [i]);\n            }\n        }\n        return result;\n    };\n\n    Array.prototype.symmetric_difference = function (other) {\n        return this.union (other) .difference (this.intersection (other));\n    };\n\n    Array.prototype.py_update = function () {   // O (n)\n        var updated = [] .concat.apply (this.slice (), arguments) .sort ();\n        this.py_clear ();\n        for (var i = 0; i < updated.length; i++) {\n            if (updated [i] != updated [i - 1]) {\n                this.push (updated [i]);\n            }\n        }\n    };\n\n    Array.prototype.__eq__ = function (other) { // Also used for list\n        if (this.length != other.length) {\n            return false;\n        }\n        if (this.__class__ == set) {\n            this.sort ();\n            other.sort ();\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this [i] != other [i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    Array.prototype.__ne__ = function (other) { // Also used for list\n        return !this.__eq__ (other);\n    };\n\n    Array.prototype.__le__ = function (other) {\n        return this.issubset (other);\n    };\n\n    Array.prototype.__ge__ = function (other) {\n        return this.issuperset (other);\n    };\n\n    Array.prototype.__lt__ = function (other) {\n        return this.issubset (other) && !this.issuperset (other);\n    };\n\n    Array.prototype.__gt__ = function (other) {\n        return this.issuperset (other) && !this.issubset (other);\n    };\n\n    // Byte array extensions\n    \n    function bytearray (bytable, encoding) {\n        if (bytable == undefined) {\n            return new Uint8Array (0);\n        }\n        else {\n            var aType = py_typeof (bytable);\n            if (aType == int) {\n                return new Uint8Array (bytable);\n            }\n            else if (aType == str) {\n                var aBytes = new Uint8Array (len (bytable));\n                for (var i = 0; i < len (bytable); i++) {\n                    aBytes [i] = bytable.charCodeAt (i);\n                }\n                return aBytes;\n            }\n            else if (aType == list || aType == tuple) {\n                return new Uint8Array (bytable);\n            }\n            else {\n                throw py_TypeError;\n            }\n        }\n    }\n\n    var bytes = bytearray;\n    \n    __all__.bytearray = bytearray;\n    __all__.bytes = bytearray;\n   \n    Uint8Array.prototype.__add__ = function (aBytes) {\n        var result = new Uint8Array (this.length + aBytes.length);\n        result.set (this);\n        result.set (aBytes, this.length);\n        return result;\n    };\n\n    Uint8Array.prototype.__mul__ = function (scalar) {\n        var result = new Uint8Array (scalar * this.length);\n        for (var i = 0; i < scalar; i++) {\n            result.set (this, i * this.length);\n        }\n        return result;\n    };\n\n    Uint8Array.prototype.__rmul__ = Uint8Array.prototype.__mul__;\n    \n    // String extensions\n\n    function str (stringable) {\n        try {\n            return stringable.__str__ ();\n        }\n        catch (exception) {\n            try {\n                return repr (stringable);\n            }\n            catch (exception) {\n                return String (stringable); // No new, so no permanent String object but a primitive in a temporary 'just in time' wrapper\n            }\n        }\n    };\n    __all__.str = str;\n\n    String.prototype.__class__ = str;   // All strings are str\n    str.__name__ = 'str';\n\n    String.prototype.__iter__ = function () {new __PyIterator__ (this);};\n\n    String.prototype.__repr__ = function () {\n        return (this.indexOf ('\\'') == -1 ? '\\'' + this + '\\'' : '\"' + this + '\"') .py_replace ('\\t', '\\\\t') .py_replace ('\\n', '\\\\n');\n    };\n\n    String.prototype.__str__ = function () {\n        return this;\n    };\n\n    String.prototype.capitalize = function () {\n        return this.charAt (0).toUpperCase () + this.slice (1);\n    };\n\n    String.prototype.endswith = function (suffix) {\n        return suffix == '' || this.slice (-suffix.length) == suffix;\n    };\n\n    String.prototype.find  = function (sub, start) {\n        return this.indexOf (sub, start);\n    };\n\n    String.prototype.__getslice__ = function (start, stop, step) {\n        if (start < 0) {\n            start = this.length + start;\n        }\n\n        if (stop == null) {\n            stop = this.length;\n        }\n        else if (stop < 0) {\n            stop = this.length + stop;\n        }\n\n        var result = '';\n        if (step == 1) {\n            result = this.substring (start, stop);\n        }\n        else {\n            for (var index = start; index < stop; index += step) {\n                result = result.concat (this.charAt(index));\n            }\n        }\n        return result;\n    }\n\n    // Since it's worthwhile for the 'format' function to be able to deal with *args, it is defined as a property\n    // __get__ will produce a bound function if there's something before the dot\n    // Since a call using *args is compiled to e.g. <object>.<function>.apply (null, args), the function has to be bound already\n    // Otherwise it will never be, because of the null argument\n    // Using 'this' rather than 'null' contradicts the requirement to be able to pass bound functions around\n    // The object 'before the dot' won't be available at call time in that case, unless implicitly via the function bound to it\n    // While for Python methods this mechanism is generated by the compiler, for JavaScript methods it has to be provided manually\n    // Call memoizing is unattractive here, since every string would then have to hold a reference to a bound format method\n    __setProperty__ (String.prototype, 'format', {\n        get: function () {return __get__ (this, function (self) {\n            var args = tuple ([] .slice.apply (arguments).slice (1));\n            var autoIndex = 0;\n            return self.replace (/\\{(\\w*)\\}/g, function (match, key) {\n                if (key == '') {\n                    key = autoIndex++;\n                }\n                if (key == +key) {  // So key is numerical\n                    return args [key] == undefined ? match : str (args [key]);\n                }\n                else {              // Key is a string\n                    for (var index = 0; index < args.length; index++) {\n                        // Find first 'dict' that has that key and the right field\n                        if (typeof args [index] == 'object' && args [index][key] != undefined) {\n                            return str (args [index][key]); // Return that field field\n                        }\n                    }\n                    return match;\n                }\n            });\n        });},\n        enumerable: true\n    });\n\n    String.prototype.isalnum = function () {\n        return /^[0-9a-zA-Z]{1,}$/.test(this)\n    }\n\n    String.prototype.isalpha = function () {\n        return /^[a-zA-Z]{1,}$/.test(this)\n    }\n\n    String.prototype.isdecimal = function () {\n        return /^[0-9]{1,}$/.test(this)\n    }\n\n    String.prototype.isdigit = function () {\n        return this.isdecimal()\n    }\n\n    String.prototype.islower = function () {\n        return /^[a-z]{1,}$/.test(this)\n    }\n\n    String.prototype.isupper = function () {\n        return /^[A-Z]{1,}$/.test(this)\n    }\n\n    String.prototype.isspace = function () {\n        return /^[\\s]{1,}$/.test(this)\n    }\n\n    String.prototype.isnumeric = function () {\n        return !isNaN (parseFloat (this)) && isFinite (this);\n    };\n\n    String.prototype.join = function (strings) {\n__pragma__ ('ifdef', '__esv6__')\n        strings = Array.from (strings); // Much faster than iterating through strings char by char\n__pragma__ ('endif')\n        return strings.join (this);\n    };\n\n    String.prototype.lower = function () {\n        return this.toLowerCase ();\n    };\n\n    String.prototype.py_replace = function (old, aNew, maxreplace) {\n        return this.split (old, maxreplace) .join (aNew);\n    };\n\n    String.prototype.lstrip = function () {\n        return this.replace (/^\\s*/g, '');\n    };\n\n    String.prototype.rfind = function (sub, start) {\n        return this.lastIndexOf (sub, start);\n    };\n\n    String.prototype.rsplit = function (sep, maxsplit) {    // Combination of general whitespace sep and positive maxsplit neither supported nor checked, expensive and rare\n        if (sep == undefined || sep == null) {\n            sep = /\\s+/;\n            var stripped = this.strip ();\n        }\n        else {\n            var stripped = this;\n        }\n\n        if (maxsplit == undefined || maxsplit == -1) {\n            return stripped.split (sep);\n        }\n        else {\n            var result = stripped.split (sep);\n            if (maxsplit < result.length) {\n                var maxrsplit = result.length - maxsplit;\n                return [result.slice (0, maxrsplit) .join (sep)] .concat (result.slice (maxrsplit));\n            }\n            else {\n                return result;\n            }\n        }\n    };\n\n    String.prototype.rstrip = function () {\n        return this.replace (/\\s*$/g, '');\n    };\n\n    String.prototype.py_split = function (sep, maxsplit) {  // Combination of general whitespace sep and positive maxsplit neither supported nor checked, expensive and rare\n        if (sep == undefined || sep == null) {\n            sep = /\\s+/;\n            var stripped = this.strip ();\n        }\n        else {\n            var stripped = this;\n        }\n\n        if (maxsplit == undefined || maxsplit == -1) {\n            return stripped.split (sep);\n        }\n        else {\n            var result = stripped.split (sep);\n            if (maxsplit < result.length) {\n                return result.slice (0, maxsplit).concat ([result.slice (maxsplit).join (sep)]);\n            }\n            else {\n                return result;\n            }\n        }\n    };\n\n    String.prototype.startswith = function (prefix) {\n        return this.indexOf (prefix) == 0;\n    };\n\n    String.prototype.strip = function () {\n        return this.trim ();\n    };\n\n    String.prototype.upper = function () {\n        return this.toUpperCase ();\n    };\n\n    String.prototype.__mul__ = function (scalar) {\n        var result = this;\n        for (var i = 1; i < scalar; i++) {\n            result = result + this;\n        }\n        return result;\n    };\n\n    String.prototype.__rmul__ = String.prototype.__mul__;\n\n    // Dict extensions to object\n\n    function __keys__ () {\n        var keys = [];\n        for (var attrib in this) {\n            if (!__specialattrib__ (attrib)) {\n                keys.push (attrib);\n            }\n        }\n        return keys;\n    }\n\n    function __items__ () {\n        var items = [];\n        for (var attrib in this) {\n            if (!__specialattrib__ (attrib)) {\n                items.push ([attrib, this [attrib]]);\n            }\n        }\n        return items;\n    }\n\n    function __del__ (key) {\n        delete this [key];\n    }\n\n    function __clear__ () {\n        for (var attrib in this) {\n            delete this [attrib];\n        }\n    }\n\n    function __getdefault__ (aKey, aDefault) {  // Each Python object already has a function called __get__, so we call this one __getdefault__\n        var result = this [aKey];\n        return result == undefined ? (aDefault == undefined ? null : aDefault) : result;\n    }\n\n    function __setdefault__ (aKey, aDefault) {\n        var result = this [aKey];\n        if (result != undefined) {\n            return result;\n        }\n        var val = aDefault == undefined ? null : aDefault;\n        this [aKey] = val;\n        return val;\n    }\n\n    function __pop__ (aKey, aDefault) {\n        var result = this [aKey];\n        if (result != undefined) {\n            delete this [aKey];\n            return result;\n        } else {\n            // Identify check because user could pass None\n            if ( aDefault === undefined ) {\n                throw KeyError (aKey, new Error());\n            }\n        }\n        return aDefault;\n    }\n    \n    function __popitem__ () {\n        var aKey = Object.keys (this) [0];\n        if (aKey == null) {\n            throw KeyError (\"popitem(): dictionary is empty\", new Error ());\n        }\n        var result = tuple ([aKey, this [aKey]]);\n        delete this [aKey];\n        return result;\n    }\n    \n    function __update__ (aDict) {\n        for (var aKey in aDict) {\n            this [aKey] = aDict [aKey];\n        }\n    }\n    \n    function __values__ () {\n        var values = [];\n        for (var attrib in this) {\n            if (!__specialattrib__ (attrib)) {\n                values.push (this [attrib]);\n            }\n        }\n        return values;\n\n    }\n    \n    function __dgetitem__ (aKey) {\n        return this [aKey];\n    }\n    \n    function __dsetitem__ (aKey, aValue) {\n        this [aKey] = aValue;\n    }\n\n    function dict (objectOrPairs) {\n        var instance = {};\n        if (!objectOrPairs || objectOrPairs instanceof Array) { // It's undefined or an array of pairs\n            if (objectOrPairs) {\n                for (var index = 0; index < objectOrPairs.length; index++) {\n                    var pair = objectOrPairs [index];\n                    if ( !(pair instanceof Array) || pair.length != 2) {\n                        throw ValueError(\n                            \"dict update sequence element #\" + index +\n                            \" has length \" + pair.length +\n                            \"; 2 is required\", new Error());\n                    }\n                    var key = pair [0];\n                    var val = pair [1];\n                    if (!(objectOrPairs instanceof Array) && objectOrPairs instanceof Object) {\n                         // User can potentially pass in an object\n                         // that has a hierarchy of objects. This\n                         // checks to make sure that these objects\n                         // get converted to dict objects instead of\n                         // leaving them as js objects.\n                         \n                         if (!isinstance (objectOrPairs, dict)) {\n                             val = dict (val);\n                         }\n                    }\n                    instance [key] = val;\n                }\n            }\n        }\n        else {\n            if (isinstance (objectOrPairs, dict)) {\n                // Passed object is a dict already so we need to be a little careful\n                // N.B. - this is a shallow copy per python std - so\n                // it is assumed that children have already become\n                // python objects at some point.\n                \n                var aKeys = objectOrPairs.py_keys ();\n                for (var index = 0; index < aKeys.length; index++ ) {\n                    var key = aKeys [index];\n                    instance [key] = objectOrPairs [key];\n                }\n            } else if (objectOrPairs instanceof Object) {\n                // Passed object is a JavaScript object but not yet a dict, don't copy it\n                instance = objectOrPairs;\n            } else {\n                // We have already covered Array so this indicates\n                // that the passed object is not a js object - i.e.\n                // it is an int or a string, which is invalid.\n                \n                throw ValueError (\"Invalid type of object for dict creation\", new Error ());\n            }\n        }\n\n        // Trancrypt interprets e.g. {aKey: 'aValue'} as a Python dict literal rather than a JavaScript object literal\n        // So dict literals rather than bare Object literals will be passed to JavaScript libraries\n        // Some JavaScript libraries call all enumerable callable properties of an object that's passed to them\n        // So the properties of a dict should be non-enumerable\n        __setProperty__ (instance, '__class__', {value: dict, enumerable: false, writable: true});\n        __setProperty__ (instance, 'py_keys', {value: __keys__, enumerable: false});\n        __setProperty__ (instance, '__iter__', {value: function () {new __PyIterator__ (this.py_keys ());}, enumerable: false});\n        __setProperty__ (instance, Symbol.iterator, {value: function () {new __JsIterator__ (this.py_keys ());}, enumerable: false});\n        __setProperty__ (instance, 'py_items', {value: __items__, enumerable: false});\n        __setProperty__ (instance, 'py_del', {value: __del__, enumerable: false});\n        __setProperty__ (instance, 'py_clear', {value: __clear__, enumerable: false});\n        __setProperty__ (instance, 'py_get', {value: __getdefault__, enumerable: false});\n        __setProperty__ (instance, 'py_setdefault', {value: __setdefault__, enumerable: false});\n        __setProperty__ (instance, 'py_pop', {value: __pop__, enumerable: false});\n        __setProperty__ (instance, 'py_popitem', {value: __popitem__, enumerable: false});\n        __setProperty__ (instance, 'py_update', {value: __update__, enumerable: false});\n        __setProperty__ (instance, 'py_values', {value: __values__, enumerable: false});\n        __setProperty__ (instance, '__getitem__', {value: __dgetitem__, enumerable: false});    // Needed since compound keys necessarily\n        __setProperty__ (instance, '__setitem__', {value: __dsetitem__, enumerable: false});    // trigger overloading to deal with slices\n        return instance;\n    }\n\n    __all__.dict = dict;\n    dict.__name__ = 'dict';\n    \n    // Docstring setter\n\n    function __setdoc__ (docString) {\n        this.__doc__ = docString;\n        return this;\n    }\n\n    // Python classes, methods and functions are all translated to JavaScript functions\n    __setProperty__ (Function.prototype, '__setdoc__', {value: __setdoc__, enumerable: false});\n\n    // General operator overloading, only the ones that make most sense in matrix and complex operations\n    \n    var __jsmod__ = function (a, b) {\n        if (typeof a == 'object' && '__mod__' in a) {\n            return a.__mod__ (b);\n        }\n        else if (typeof b == 'object' && '__rpow__' in b) {\n            return b.__rmod__ (a);\n        }\n        else {\n            return a % b;\n        }\n    };\n    __all__.__jsmod__ = __jsmod__;\n    \n    var __mod__ = function (a, b) {\n        if (typeof a == 'object' && '__mod__' in a) {\n            return a.__mod__ (b);\n        }\n        else if (typeof b == 'object' && '__rpow__' in b) {\n            return b.__rmod__ (a);\n        }\n        else {\n            return ((a % b) + b) % b;\n        }\n    };\n    __all__.mod = __mod__;\n    \n\n    var __pow__ = function (a, b) {\n        if (typeof a == 'object' && '__pow__' in a) {\n            return a.__pow__ (b);\n        }\n        else if (typeof b == 'object' && '__rpow__' in b) {\n            return b.__rpow__ (a);\n        }\n        else {\n            return Math.pow (a, b);\n        }\n    };\n    __all__.pow = __pow__;\n    \n    __pragma__ ('ifndef', '__xtiny__')    \n    \n    var __neg__ = function (a) {\n        if (typeof a == 'object' && '__neg__' in a) {\n            return a.__neg__ ();\n        }\n        else {\n            return -a;\n        }\n    };\n    __all__.__neg__ = __neg__;\n\n    var __matmul__ = function (a, b) {\n        return a.__matmul__ (b);\n    };\n    __all__.__matmul__ = __matmul__;\n\n    // Overloaded binary arithmetic\n    \n    var __mul__ = function (a, b) {\n        if (typeof a == 'object' && '__mul__' in a) {\n            return a.__mul__ (b);\n        }\n        else if (typeof b == 'object' && '__rmul__' in b) {\n            return b.__rmul__ (a);\n        }\n        else if (typeof a == 'string') {\n            return a.__mul__ (b);\n        }\n        else if (typeof b == 'string') {\n            return b.__rmul__ (a);\n        }\n        else {\n            return a * b;\n        }\n    };\n    __all__.__mul__ = __mul__;\n\n    var __truediv__ = function (a, b) {\n        if (typeof a == 'object' && '__truediv__' in a) {\n            return a.__truediv__ (b);\n        }\n        else if (typeof b == 'object' && '__rtruediv__' in b) {\n            return b.__rtruediv__ (a);\n        }\n        else if (typeof a == 'object' && '__div__' in a) {\n            return a.__div__ (b);\n        }\n        else if (typeof b == 'object' && '__rdiv__' in b) {\n            return b.__rdiv__ (a);\n        }\n        else {\n            return a / b;\n        }\n    };\n    __all__.__truediv__ = __truediv__;\n\n    var __floordiv__ = function (a, b) {\n        if (typeof a == 'object' && '__floordiv__' in a) {\n            return a.__floordiv__ (b);\n        }\n        else if (typeof b == 'object' && '__rfloordiv__' in b) {\n            return b.__rfloordiv__ (a);\n        }\n        else if (typeof a == 'object' && '__div__' in a) {\n            return a.__div__ (b);\n        }\n        else if (typeof b == 'object' && '__rdiv__' in b) {\n            return b.__rdiv__ (a);\n        }\n        else {\n            return Math.floor (a / b);\n        }\n    };\n    __all__.__floordiv__ = __floordiv__;\n\n    var __add__ = function (a, b) {\n        if (typeof a == 'object' && '__add__' in a) {\n            return a.__add__ (b);\n        }\n        else if (typeof b == 'object' && '__radd__' in b) {\n            return b.__radd__ (a);\n        }\n        else {\n            return a + b;\n        }\n    };\n    __all__.__add__ = __add__;\n\n    var __sub__ = function (a, b) {\n        if (typeof a == 'object' && '__sub__' in a) {\n            return a.__sub__ (b);\n        }\n        else if (typeof b == 'object' && '__rsub__' in b) {\n            return b.__rsub__ (a);\n        }\n        else {\n            return a - b;\n        }\n    };\n    __all__.__sub__ = __sub__;\n\n    // Overloaded binary bitwise\n    \n    var __lshift__ = function (a, b) {\n        if (typeof a == 'object' && '__lshift__' in a) {\n            return a.__lshift__ (b);\n        }\n        else if (typeof b == 'object' && '__rlshift__' in b) {\n            return b.__rlshift__ (a);\n        }\n        else {\n            return a << b;\n        }\n    };\n    __all__.__lshift__ = __lshift__;\n\n    var __rshift__ = function (a, b) {\n        if (typeof a == 'object' && '__rshift__' in a) {\n            return a.__rshift__ (b);\n        }\n        else if (typeof b == 'object' && '__rrshift__' in b) {\n            return b.__rrshift__ (a);\n        }\n        else {\n            return a >> b;\n        }\n    };\n    __all__.__rshift__ = __rshift__;\n\n    var __or__ = function (a, b) {\n        if (typeof a == 'object' && '__or__' in a) {\n            return a.__or__ (b);\n        }\n        else if (typeof b == 'object' && '__ror__' in b) {\n            return b.__ror__ (a);\n        }\n        else {\n            return a | b;\n        }\n    };\n    __all__.__or__ = __or__;\n\n    var __xor__ = function (a, b) {\n        if (typeof a == 'object' && '__xor__' in a) {\n            return a.__xor__ (b);\n        }\n        else if (typeof b == 'object' && '__rxor__' in b) {\n            return b.__rxor__ (a);\n        }\n        else {\n            return a ^ b;\n        }\n    };\n    __all__.__xor__ = __xor__;\n\n    var __and__ = function (a, b) {\n        if (typeof a == 'object' && '__and__' in a) {\n            return a.__and__ (b);\n        }\n        else if (typeof b == 'object' && '__rand__' in b) {\n            return b.__rand__ (a);\n        }\n        else {\n            return a & b;\n        }\n    };\n    __all__.__and__ = __and__;\n\n    // Overloaded binary compare\n    \n    var __eq__ = function (a, b) {\n        if (typeof a == 'object' && '__eq__' in a) {\n            return a.__eq__ (b);\n        }\n        else {\n            return a == b;\n        }\n    };\n    __all__.__eq__ = __eq__;\n\n    var __ne__ = function (a, b) {\n        if (typeof a == 'object' && '__ne__' in a) {\n            return a.__ne__ (b);\n        }\n        else {\n            return a != b\n        }\n    };\n    __all__.__ne__ = __ne__;\n\n    var __lt__ = function (a, b) {\n        if (typeof a == 'object' && '__lt__' in a) {\n            return a.__lt__ (b);\n        }\n        else {\n            return a < b;\n        }\n    };\n    __all__.__lt__ = __lt__;\n\n    var __le__ = function (a, b) {\n        if (typeof a == 'object' && '__le__' in a) {\n            return a.__le__ (b);\n        }\n        else {\n            return a <= b;\n        }\n    };\n    __all__.__le__ = __le__;\n\n    var __gt__ = function (a, b) {\n        if (typeof a == 'object' && '__gt__' in a) {\n            return a.__gt__ (b);\n        }\n        else {\n            return a > b;\n        }\n    };\n    __all__.__gt__ = __gt__;\n\n    var __ge__ = function (a, b) {\n        if (typeof a == 'object' && '__ge__' in a) {\n            return a.__ge__ (b);\n        }\n        else {\n            return a >= b;\n        }\n    };\n    __all__.__ge__ = __ge__;\n    \n    // Overloaded augmented general\n    \n    var __imatmul__ = function (a, b) {\n        if ('__imatmul__' in a) {\n            return a.__imatmul__ (b);\n        }\n        else {\n            return a.__matmul__ (b);\n        }\n    };\n    __all__.__imatmul__ = __imatmul__;\n\n    var __ipow__ = function (a, b) {\n        if (typeof a == 'object' && '__pow__' in a) {\n            return a.__ipow__ (b);\n        }\n        else if (typeof a == 'object' && '__ipow__' in a) {\n            return a.__pow__ (b);\n        }\n        else if (typeof b == 'object' && '__rpow__' in b) {\n            return b.__rpow__ (a);\n        }\n        else {\n            return Math.pow (a, b);\n        }\n    };\n    __all__.ipow = __ipow__;\n\n    var __ijsmod__ = function (a, b) {\n        if (typeof a == 'object' && '__imod__' in a) {\n            return a.__ismod__ (b);\n        }\n        else if (typeof a == 'object' && '__mod__' in a) {\n            return a.__mod__ (b);\n        }\n        else if (typeof b == 'object' && '__rpow__' in b) {\n            return b.__rmod__ (a);\n        }\n        else {\n            return a % b;\n        }\n    };\n    __all__.ijsmod__ = __ijsmod__;\n    \n    var __imod__ = function (a, b) {\n        if (typeof a == 'object' && '__imod__' in a) {\n            return a.__imod__ (b);\n        }\n        else if (typeof a == 'object' && '__mod__' in a) {\n            return a.__mod__ (b);\n        }\n        else if (typeof b == 'object' && '__rpow__' in b) {\n            return b.__rmod__ (a);\n        }\n        else {\n            return ((a % b) + b) % b;\n        }\n    };\n    __all__.imod = __imod__;\n    \n    // Overloaded augmented arithmetic\n    \n    var __imul__ = function (a, b) {\n        if (typeof a == 'object' && '__imul__' in a) {\n            return a.__imul__ (b);\n        }\n        else if (typeof a == 'object' && '__mul__' in a) {\n            return a = a.__mul__ (b);\n        }\n        else if (typeof b == 'object' && '__rmul__' in b) {\n            return a = b.__rmul__ (a);\n        }\n        else if (typeof a == 'string') {\n            return a = a.__mul__ (b);\n        }\n        else if (typeof b == 'string') {\n            return a = b.__rmul__ (a);\n        }\n        else {\n            return a *= b;\n        }\n    };\n    __all__.__imul__ = __imul__;\n\n    var __idiv__ = function (a, b) {\n        if (typeof a == 'object' && '__idiv__' in a) {\n            return a.__idiv__ (b);\n        }\n        else if (typeof a == 'object' && '__div__' in a) {\n            return a = a.__div__ (b);\n        }\n        else if (typeof b == 'object' && '__rdiv__' in b) {\n            return a = b.__rdiv__ (a);\n        }\n        else {\n            return a /= b;\n        }\n    };\n    __all__.__idiv__ = __idiv__;\n\n    var __iadd__ = function (a, b) {\n        if (typeof a == 'object' && '__iadd__' in a) {\n            return a.__iadd__ (b);\n        }\n        else if (typeof a == 'object' && '__add__' in a) {\n            return a = a.__add__ (b);\n        }\n        else if (typeof b == 'object' && '__radd__' in b) {\n            return a = b.__radd__ (a);\n        }\n        else {\n            return a += b;\n        }\n    };\n    __all__.__iadd__ = __iadd__;\n\n    var __isub__ = function (a, b) {\n        if (typeof a == 'object' && '__isub__' in a) {\n            return a.__isub__ (b);\n        }\n        else if (typeof a == 'object' && '__sub__' in a) {\n            return a = a.__sub__ (b);\n        }\n        else if (typeof b == 'object' && '__rsub__' in b) {\n            return a = b.__rsub__ (a);\n        }\n        else {\n            return a -= b;\n        }\n    };\n    __all__.__isub__ = __isub__;\n\n    // Overloaded augmented bitwise\n    \n    var __ilshift__ = function (a, b) {\n        if (typeof a == 'object' && '__ilshift__' in a) {\n            return a.__ilshift__ (b);\n        }\n        else if (typeof a == 'object' && '__lshift__' in a) {\n            return a = a.__lshift__ (b);\n        }\n        else if (typeof b == 'object' && '__rlshift__' in b) {\n            return a = b.__rlshift__ (a);\n        }\n        else {\n            return a <<= b;\n        }\n    };\n    __all__.__ilshift__ = __ilshift__;\n\n    var __irshift__ = function (a, b) {\n        if (typeof a == 'object' && '__irshift__' in a) {\n            return a.__irshift__ (b);\n        }\n        else if (typeof a == 'object' && '__rshift__' in a) {\n            return a = a.__rshift__ (b);\n        }\n        else if (typeof b == 'object' && '__rrshift__' in b) {\n            return a = b.__rrshift__ (a);\n        }\n        else {\n            return a >>= b;\n        }\n    };\n    __all__.__irshift__ = __irshift__;\n\n    var __ior__ = function (a, b) {\n        if (typeof a == 'object' && '__ior__' in a) {\n            return a.__ior__ (b);\n        }\n        else if (typeof a == 'object' && '__or__' in a) {\n            return a = a.__or__ (b);\n        }\n        else if (typeof b == 'object' && '__ror__' in b) {\n            return a = b.__ror__ (a);\n        }\n        else {\n            return a |= b;\n        }\n    };\n    __all__.__ior__ = __ior__;\n\n    var __ixor__ = function (a, b) {\n        if (typeof a == 'object' && '__ixor__' in a) {\n            return a.__ixor__ (b);\n        }\n        else if (typeof a == 'object' && '__xor__' in a) {\n            return a = a.__xor__ (b);\n        }\n        else if (typeof b == 'object' && '__rxor__' in b) {\n            return a = b.__rxor__ (a);\n        }\n        else {\n            return a ^= b;\n        }\n    };\n    __all__.__ixor__ = __ixor__;\n\n    var __iand__ = function (a, b) {\n        if (typeof a == 'object' && '__iand__' in a) {\n            return a.__iand__ (b);\n        }\n        else if (typeof a == 'object' && '__and__' in a) {\n            return a = a.__and__ (b);\n        }\n        else if (typeof b == 'object' && '__rand__' in b) {\n            return a = b.__rand__ (a);\n        }\n        else {\n            return a &= b;\n        }\n    };\n    __all__.__iand__ = __iand__;\n    \n    // Indices and slices\n\n    var __getitem__ = function (container, key) {                           // Slice c.q. index, direct generated call to runtime switch\n        if (typeof container == 'object' && '__getitem__' in container) {\n            return container.__getitem__ (key);                             // Overloaded on container\n        }\n        else {\n            return container [key];                                         // Container must support bare JavaScript brackets\n        }\n    };\n    __all__.__getitem__ = __getitem__;\n\n    var __setitem__ = function (container, key, value) {                    // Slice c.q. index, direct generated call to runtime switch\n        if (typeof container == 'object' && '__setitem__' in container) {\n            container.__setitem__ (key, value);                             // Overloaded on container\n        }\n        else {\n            container [key] = value;                                        // Container must support bare JavaScript brackets\n        }\n    };\n    __all__.__setitem__ = __setitem__;\n\n    var __getslice__ = function (container, lower, upper, step) {           // Slice only, no index, direct generated call to runtime switch\n        if (typeof container == 'object' && '__getitem__' in container) {\n            return container.__getitem__ ([lower, upper, step]);            // Container supports overloaded slicing c.q. indexing\n        }\n        else {\n            return container.__getslice__ (lower, upper, step);             // Container only supports slicing injected natively in prototype\n        }\n    };\n    __all__.__getslice__ = __getslice__;\n\n    var __setslice__ = function (container, lower, upper, step, value) {    // Slice, no index, direct generated call to runtime switch\n        if (typeof container == 'object' && '__setitem__' in container) {\n            container.__setitem__ ([lower, upper, step], value);            // Container supports overloaded slicing c.q. indexing\n        }\n        else {\n            container.__setslice__ (lower, upper, step, value);             // Container only supports slicing injected natively in prototype\n        }\n    };\n    __all__.__setslice__ = __setslice__;\n    \n__pragma__ ('endif') \n",
		"from random import random\n\nfrom unit import make_unit, Stack\n\n\ndef fight(stackA, stackB, num_iter):\n    wins = {stackA.name: [0, 0],\n            stackB.name: [0, 0]}\n\n    def units_order(s1, s2):\n        temp = sorted([s1, s2], key=lambda x: x.speed, reverse=True)\n        if s1.speed == s2.speed and random() < .5:\n            return reversed(temp)\n        return temp\n\n    # __pragma__('kwargs')\n\n    def melee_hit(current, other):\n        if (other.name == 'Azure Dragon' and\n                not current.is_nonliving() and\n                random() < .1):\n            return other, current\n\n        stun_break_bonus = False\n        if not current.is_stunned():\n            stun_break_bonus = (other.is_stunned() and\n                                not other.stunned_from_retaliation)\n            recovery_blindness = other.blinded > 0\n            recovery_paralysis = other.paralyzed > 0\n\n            dmg_reductions = []\n            if other.petrified:\n                dmg_reductions.append(.5)\n\n            current.attack_melee(\n                other,\n                dmg_reductions=dmg_reductions,\n                melee_penalty=current.melee_penalty())\n\n            if (other.is_alive() and\n                    not current.no_retaliation()\n                    and not other.is_stunned()):\n                retaliation_dmg_reductions = []\n                if recovery_paralysis:\n                    retaliation_dmg_reductions.append(.75)\n                elif recovery_blindness:\n                    retaliation_dmg_reductions.append(.5)\n                other.attack_melee(\n                    current,\n                    dmg_reductions=retaliation_dmg_reductions,\n                    melee_penalty=other.melee_penalty(),\n                    retaliation=True)\n\n            if (current.is_alive() and\n                    current.strikes_twice() and\n                    other.is_alive() and\n                    not current.is_stunned()):\n                current.attack_melee(other)\n\n        current.advance_statuses()\n\n        if other.name in ['Wight', 'Wraith', 'Troll'] and other.is_alive():\n            other.regenerate()\n\n        # other gets extra turn if stun just ended and it missed\n        # an action this combat round\n        if (stun_break_bonus and\n                not other.is_stunned() and\n                other.is_alive() and\n                current.is_alive() and\n                ((current.speed < other.speed) or\n                 (current.speed == other.speed and random() < .5))):\n            melee_hit(other, current)\n\n        return other, current\n\n    # __pragma__('nokwargs')\n\n    def range_hit(current, other, penalty):\n        penalty = current.range_penalty() if penalty else False\n        current.attack_range(other, penalty)\n        if current.shoots_twice() and current.shots > 0:\n            current.attack_range(other, penalty)\n        if other.name in ['Wight', 'Wraith', 'Troll'] and other.is_alive():\n            other.regenerate()\n        return other, current\n\n    def fight_to_death(current, other):\n        while current.is_alive() and other.is_alive():\n            current, other = melee_hit(current, other)\n        return current, other\n\n    def walker_vs_shooter(walker, shooter):\n\n        to_walk = starting_dist - 1\n        first_move = to_walk % walker.speed\n        if first_move == 0:\n            first_move = walker.speed\n        avoid_by_move = to_walk - first_move > 10\n        avoid_by_wait = False\n\n        if walker.speed < shooter.speed:\n            num_shots = to_walk // walker.speed + (to_walk % walker.speed > 0)\n        elif walker.speed > shooter.speed:\n            num_shots = to_walk // walker.speed - (to_walk % walker.speed == 0)\n            avoid_by_wait = True\n        else:\n            if random() < .5:\n                num_shots = to_walk // walker.speed + \\\n                    (to_walk % walker.speed > 0)\n            else:\n                num_shots = to_walk // walker.speed - \\\n                    (to_walk % walker.speed == 0)\n\n        num_full_shots = max(0, num_shots - avoid_by_move - avoid_by_wait)\n        num_half_shots = num_shots - num_full_shots\n\n        for j in range(num_half_shots):\n            range_hit(shooter, walker, True)\n        for j in range(num_full_shots):\n            range_hit(shooter, walker, False)\n\n        current, other = walker, shooter\n        return fight_to_death(current, other)\n\n    starting_dist = 14\n    if stackA.is_big():\n        starting_dist -= 1\n    if stackB.is_big():\n        starting_dist -= 1\n\n    for it in range(num_iter):\n        current, other = units_order(stackA, stackB)\n\n        if not current.is_shooter() and not other.is_shooter():\n            current, other = fight_to_death(current, other)\n\n        elif current.is_shooter() and other.is_shooter():\n            full_round = True\n            while (current.is_alive() and\n                    ((current.shots > 0 and other.shots > 0)\n                        or not full_round)):\n                current, other = range_hit(current, other, True)\n                full_round = not full_round\n            if current.is_alive():\n                if current.shots == 0 and other.shots == 0:\n                    current, other = units_order(current, other)\n                    current, other = fight_to_death(current, other)\n                else:\n                    shooter = current if current.shots > 0 else other\n                    walker = current if current.shots == 0 else other\n                    current, other = walker_vs_shooter(walker, shooter)\n\n        else:\n            shooter = current if current.is_shooter() else other\n            walker = current if not current.is_shooter() else other\n            current, other = walker_vs_shooter(walker, shooter)\n\n        winner = current if current.is_alive() else other\n        wins[winner.name][0] += 1\n        wins[winner.name][1] += winner.count\n\n        stackA.reset_state()\n        stackB.reset_state()\n\n    for s in [stackA.name, stackB.name]:\n        if wins[s][0]:\n            wins[s][1] /= float(wins[s][0])\n\n    return wins\n\n\ndef find_balance(nameA, nameB, num_iter, startA):\n\n    if nameA == nameB:\n        if startA:\n            return startA, startA\n        return 1, 1\n\n    def balanced(result):\n        return (num_iter // 2) * .95 < \\\n            result[A.name][0] < \\\n            (num_iter // 2) * 1.05\n\n    unitA = make_unit(nameA)\n    unitB = make_unit(nameB)\n\n    startA = startA or unitB.ai_value * 10\n    startB = int(float(startA) / unitB.ai_value * unitA.ai_value)\n\n    A = Stack(unitA, startA)\n    B = Stack(unitB, startB)\n\n    res = fight(A, B, num_iter)\n\n    if balanced(res):\n        return A.count, B.count\n\n    B_won_last = res[A.name][0] < res[B.name][0]\n    sign = -1 if B_won_last else 1\n    change = sign * max(int(B.count / 10.), 1)\n    enough = False\n\n    while not enough:\n        x1 = B.count\n        B.count += change\n        B.cap += change\n        res = fight(A, B, num_iter)\n        B_won = res[A.name][0] < res[B.name][0]\n        enough = B_won != B_won_last\n        if not enough:\n            B_won_last = B_won\n\n    if balanced(res):\n        return A.count, B.count\n\n    x2 = B.count\n\n    low = min(x1, x2)\n    high = max(x1, x2)\n\n    # here binsearch from [low, high] for balanced result\n    while True:\n        middle = low + (high - low) // 2\n        B.count = middle\n        B.cap = middle\n        res = fight(A, B, num_iter)\n        if balanced(res) or abs(high - low) <= 1:\n            return A.count, max(B.count, 1)\n        B_won = res[A.name][0] < res[B.name][0]\n        if B_won:\n            high = middle - 1\n        else:\n            low = middle + 1\n",
		"haters = {\n    ('Angel', 'Arch Devil'),\n    ('Angel', 'Devil'),\n    ('Archangel', 'Arch Devil'),\n    ('Archangel', 'Devil'),\n    ('Arch Devil', 'Angel'),\n    ('Arch Devil', 'Archangel'),\n    ('Black Dragon', 'Giant'),\n    ('Black Dragon', 'Titan'),\n    ('Devil', 'Angel'),\n    ('Devil', 'Archangel'),\n    ('Genie', 'Efreet'),\n    ('Genie', 'Efreet Sultan'),\n    ('Efreet', 'Genie'),\n    ('Efreet', 'Master Genie'),\n    ('Efreet Sultan', 'Genie'),\n    ('Efreet Sultan', 'Master Genie'),\n    ('Titan', 'Black Dragon'),\n    ('Master Genie', 'Efreet'),\n    ('Master Genie', 'Efreet Sultan')\n}\n\nelementals = {\n    ('Storm Elemental', 'Magma Elemental'),\n    ('Storm Elemental', 'Earth Elemental'),\n    ('Energy Elemental', 'Ice Elemental'),\n    ('Energy Elemental', 'Water Elemental'),\n    ('Ice Elemental', 'Energy Elemental'),\n    ('Ice Elemental', 'Fire Elemental'),\n    ('Magma Elemental', 'Storm Elemental'),\n    ('Magma Elemental', 'Air Elemental'),\n    ('Fire Elemental', 'Ice Elemental'),\n    ('Fire Elemental', 'Water Elemental'),\n    ('Air Elemental', 'Magma Elemental'),\n    ('Air Elemental', 'Earth Elemental'),\n    ('Water Elemental', 'Energy Elemental'),\n    ('Water Elemental', 'Fire Elemental'),\n    ('Earth Elemental', 'Storm Elemental'),\n    ('Earth Elemental', 'Air Elemental')\n}\n\ncolumns = [\n    'Singular',\n    'AI Value',\n    'Hit Points',\n    'Speed',\n    'Attack',\n    'Defense',\n    'MinDmg',\n    'MaxDmg',\n    'Shots',\n    'Attributes'\n]\n\ndata = {\n    'Pikeman': [80, 10, 4, 4, 5, 1, 3, 0, ['cusNO_JOUSTING']],\n    'Halberdier': [115, 10, 5, 6, 5, 2, 3, 0, ['cusNO_JOUSTING']],\n    'Archer': [126, 10, 4, 6, 3, 2, 3, 12, ['SHOOTING_ARMY']],\n    'Marksman': [184, 10, 6, 6, 3, 2, 3, 24,\n                 ['const_two_attacks', 'SHOOTING_ARMY']],\n    'Griffin': [351, 25, 6, 8, 8, 3, 6, 0, ['DOUBLE_WIDE', 'FLYING_ARMY']],\n    'Royal Griffin': [448, 25, 9, 9, 9, 3, 6, 0,\n                      ['DOUBLE_WIDE', 'FLYING_ARMY']],\n    'Swordsman': [445, 35, 5, 10, 12, 6, 9, 0, []],\n    'Crusader': [588, 35, 6, 12, 12, 7, 10, 0, ['const_two_attacks']],\n    'Monk': [485, 30, 5, 12, 7, 10, 12, 12, ['SHOOTING_ARMY']],\n    'Zealot': [750, 30, 7, 12, 10, 10, 12, 24,\n               ['SHOOTING_ARMY', 'const_no_melee_penalty']],\n    'Cavalier': [1946, 100, 7, 15, 15, 15, 25, 0,\n                 ['DOUBLE_WIDE', 'const_jousting']],\n    'Champion': [2100, 100, 9, 16, 16, 20, 25, 0,\n                 ['DOUBLE_WIDE', 'const_jousting']],\n    'Angel': [5019, 200, 12, 20, 20, 50, 50, 0,\n              ['FLYING_ARMY', 'const_raises_morale', 'KING_2']],\n    'Archangel': [8776, 250, 18, 30, 30, 50, 50, 1,\n                  ['DOUBLE_WIDE', 'FLYING_ARMY', 'const_raises_morale',\n                   'KING_2']],\n    'Centaur': [100, 8, 6, 5, 3, 2, 3, 0, ['DOUBLE_WIDE']],\n    'Centaur Captain': [138, 10, 8, 6, 3, 2, 3, 0, ['DOUBLE_WIDE']],\n    'Dwarf': [138, 20, 3, 6, 7, 2, 4, 0, []],\n    'Battle Dwarf': [209, 20, 5, 7, 7, 2, 4, 0, []],\n    'Wood Elf': [234, 15, 6, 9, 5, 3, 5, 24, ['SHOOTING_ARMY']],\n    'Grand Elf': [331, 15, 7, 9, 5, 3, 5, 24,\n                  ['SHOOTING_ARMY', 'const_two_attacks']],\n    'Pegasus': [518, 30, 8, 9, 8, 5, 9, 0, ['DOUBLE_WIDE', 'FLYING_ARMY']],\n    'Silver Pegasus': [532, 30, 12, 9, 10, 5, 9, 0,\n                       ['DOUBLE_WIDE', 'FLYING_ARMY']],\n    'Dendroid Guard': [517, 55, 3, 9, 12, 10, 14, 0, []],\n    'Dendroid Soldier': [803, 65, 4, 9, 12, 10, 14, 0, []],\n    'Unicorn': [1806, 90, 7, 15, 14, 18, 22, 0, ['DOUBLE_WIDE']],\n    'War Unicorn': [2030, 110, 9, 15, 14, 18, 22, 0, ['DOUBLE_WIDE']],\n    'Green Dragon': [4872, 180, 10, 18, 18, 40, 50, 0,\n                     ['DOUBLE_WIDE', 'FLYING_ARMY', 'KING_1']],\n    'Gold Dragon': [8613, 250, 16, 27, 27, 40, 50, 0,\n                    ['DOUBLE_WIDE', 'FLYING_ARMY', 'KING_1']],\n    'Gremlin': [44, 4, 4, 3, 3, 1, 2, 0, []],\n    'Master Gremlin': [66, 4, 5, 4, 4, 1, 2, 8, ['SHOOTING_ARMY']],\n    'Stone Gargoyle': [165, 16, 6, 6, 6, 2, 3, 0,\n                       ['FLYING_ARMY', 'cusGOLEM']],\n    'Obsidian Gargoyle': [201, 16, 9, 7, 7, 2, 3, 0,\n                          ['FLYING_ARMY', 'cusGOLEM']],\n    'Stone Golem': [250, 30, 3, 7, 10, 4, 5, 0, ['cusGOLEM']],\n    'Iron Golem': [412, 35, 5, 9, 10, 4, 5, 0, ['cusGOLEM']],\n    'Mage': [570, 25, 5, 11, 8, 7, 9, 24,\n             ['SHOOTING_ARMY', 'const_no_melee_penalty']],\n    'Arch Mage': [680, 30, 7, 12, 9, 7, 9, 24,\n                  ['SHOOTING_ARMY', 'const_no_melee_penalty',\n                   'const_no_wall_penalty']],\n    'Genie': [884, 40, 7, 12, 12, 13, 16, 0, ['FLYING_ARMY']],\n    'Master Genie': [942, 40, 11, 12, 12, 13, 16, 3, ['FLYING_ARMY']],\n    'Naga': [2016, 110, 5, 16, 13, 20, 20, 0,\n             ['DOUBLE_WIDE', 'const_free_attack']],\n    'Naga Queen': [2840, 110, 7, 16, 13, 30, 30, 0,\n                   ['DOUBLE_WIDE', 'const_free_attack']],\n    'Giant': [3718, 150, 7, 19, 16, 40, 60, 0, ['KING_3']],\n    'Titan': [7500, 300, 11, 24, 24, 40, 60, 24,\n              ['SHOOTING_ARMY', 'const_no_melee_penalty', 'KING_3']],\n    'Imp': [50, 4, 5, 2, 3, 1, 2, 0, []],\n    'Familiar': [60, 4, 7, 4, 4, 1, 2, 0, []],\n    'Gog': [159, 13, 4, 6, 4, 2, 4, 12, ['SHOOTING_ARMY']],\n    'Magog': [240, 13, 6, 7, 4, 2, 4, 24, ['SHOOTING_ARMY']],\n    'Hell Hound': [357, 25, 7, 10, 6, 2, 7, 0, ['DOUBLE_WIDE', 'FLYING_ARMY']],\n    'Cerberus': [392, 25, 8, 10, 8, 2, 7, 0,\n                 ['DOUBLE_WIDE', 'FLYING_ARMY', 'const_free_attack']],\n    'Demon': [445, 35, 5, 10, 10, 7, 9, 0, []],\n    'Horned Demon': [480, 40, 6, 10, 10, 7, 9, 0, []],\n    'Pit Fiend': [765, 45, 6, 13, 13, 13, 17, 0, []],\n    'Pit Lord': [1224, 45, 7, 13, 13, 13, 17, 1, []],\n    'Efreet': [1670, 90, 9, 16, 12, 16, 24, 0, []],\n    'Efreet Sultan': [1848, 90, 13, 16, 14, 16, 24, 0, []],\n    'Devil': [5101, 160, 11, 19, 21, 30, 40, 0,\n              ['FLYING_ARMY', 'KING_2', 'const_free_attack']],\n    'Arch Devil': [7115, 200, 17, 26, 28, 30, 40, 0,\n                   ['FLYING_ARMY', 'KING_2', 'const_free_attack']],\n    'Skeleton': [60, 6, 4, 5, 4, 1, 3, 0, ['IS_UNDEAD']],\n    'Skeleton Warrior': [85, 6, 5, 6, 6, 1, 3, 0, ['IS_UNDEAD']],\n    'Walking Dead': [98, 15, 3, 5, 5, 2, 3, 0, ['IS_UNDEAD']],\n    'Zombie': [128, 20, 4, 5, 5, 2, 3, 0, ['IS_UNDEAD']],\n    'Wight': [252, 18, 5, 7, 7, 3, 5, 0, ['FLYING_ARMY', 'IS_UNDEAD']],\n    'Wraith': [315, 18, 7, 7, 7, 3, 5, 0, ['FLYING_ARMY', 'IS_UNDEAD']],\n    'Vampire': [555, 30, 6, 10, 9, 5, 8, 0,\n                ['FLYING_ARMY', 'IS_UNDEAD', 'const_free_attack']],\n    'Vampire Lord': [783, 40, 9, 10, 10, 5, 8, 0,\n                     ['FLYING_ARMY', 'IS_UNDEAD', 'const_free_attack']],\n    'Lich': [848, 30, 6, 13, 10, 11, 13, 12, ['SHOOTING_ARMY', 'IS_UNDEAD']],\n    'Power Lich': [1079, 40, 7, 13, 10, 11, 15, 24,\n                   ['SHOOTING_ARMY', 'IS_UNDEAD']],\n    'Black Knight': [2087, 120, 7, 16, 16, 15, 30, 0,\n                     ['DOUBLE_WIDE', 'IS_UNDEAD']],\n    'Dread Knight': [2382, 120, 9, 18, 18, 15, 30, 0,\n                     ['DOUBLE_WIDE', 'IS_UNDEAD']],\n    'Bone Dragon': [3388, 150, 9, 17, 15, 25, 50, 0,\n                    ['DOUBLE_WIDE', 'IS_UNDEAD', 'const_lowers_morale',\n                     'FLYING_ARMY', 'KING_1']],\n    'Ghost Dragon': [4696, 200, 14, 19, 17, 25, 50, 0,\n                     ['DOUBLE_WIDE', 'IS_UNDEAD', 'const_lowers_morale',\n                      'FLYING_ARMY', 'KING_1']],\n    'Troglodyte': [59, 5, 4, 4, 3, 1, 3, 0, []],\n    'Infernal Troglodyte': [84, 6, 5, 5, 4, 1, 3, 0, []],\n    'Harpy': [154, 14, 6, 6, 5, 1, 4, 0, ['FLYING_ARMY']],\n    'Harpy Hag': [238, 14, 9, 6, 6, 1, 4, 0,\n                  ['FLYING_ARMY', 'const_free_attack']],\n    'Beholder': [336, 22, 5, 9, 7, 3, 5, 12,\n                 ['SHOOTING_ARMY', 'const_no_melee_penalty']],\n    'Evil Eye': [367, 22, 7, 10, 8, 3, 5, 24,\n                 ['SHOOTING_ARMY', 'const_no_melee_penalty']],\n    'Medusa': [517, 25, 5, 9, 9, 6, 8, 4,\n               ['DOUBLE_WIDE', 'SHOOTING_ARMY', 'const_no_melee_penalty']],\n    'Medusa Queen': [577, 30, 6, 10, 10, 6, 8, 8,\n                     ['DOUBLE_WIDE', 'SHOOTING_ARMY',\n                      'const_no_melee_penalty']],\n    'Minotaur': [835, 50, 6, 14, 12, 12, 20, 0, []],\n    'Minotaur King': [1068, 50, 8, 15, 15, 12, 20, 0, []],\n    'Manticore': [1547, 80, 7, 15, 13, 14, 20, 0,\n                  ['DOUBLE_WIDE', 'FLYING_ARMY']],\n    'Scorpicore': [1589, 80, 11, 16, 14, 14, 20, 0,\n                   ['DOUBLE_WIDE', 'FLYING_ARMY']],\n    'Red Dragon': [4702, 180, 11, 19, 19, 40, 50, 0,\n                   ['DOUBLE_WIDE', 'FLYING_ARMY', 'KING_1']],\n    'Black Dragon': [8721, 300, 15, 25, 25, 40, 50, 0,\n                     ['DOUBLE_WIDE', 'FLYING_ARMY', 'KING_1']],\n    'Goblin': [60, 5, 5, 4, 2, 1, 2, 0, []],\n    'Hobgoblin': [78, 5, 7, 5, 3, 1, 2, 0, []],\n    'Wolf Rider': [130, 10, 6, 7, 5, 2, 4, 0, ['DOUBLE_WIDE']],\n    'Wolf Raider': [203, 10, 8, 8, 5, 3, 4, 0,\n                    ['DOUBLE_WIDE', 'const_two_attacks']],\n    'Orc': [192, 15, 4, 8, 4, 2, 5, 12, ['SHOOTING_ARMY']],\n    'Orc Chieftain': [240, 20, 5, 8, 4, 2, 5, 24, ['SHOOTING_ARMY']],\n    'Ogre': [416, 40, 4, 13, 7, 6, 12, 0, []],\n    'Ogre Mage': [672, 60, 5, 13, 7, 6, 12, 3, []],\n    'Roc': [1027, 60, 7, 13, 11, 11, 15, 0, ['FLYING_ARMY', 'DOUBLE_WIDE']],\n    'Thunderbird': [1106, 60, 11, 13, 11, 11, 15, 0,\n                    ['FLYING_ARMY', 'DOUBLE_WIDE']],\n    'Cyclops': [1266, 70, 6, 15, 12, 16, 20, 16,\n                ['SHOOTING_ARMY', 'CATAPULT']],\n    'Cyclops King': [1443, 70, 8, 17, 13, 16, 20, 24,\n                     ['SHOOTING_ARMY', 'CATAPULT']],\n    'Behemoth': [3162, 160, 6, 17, 17, 30, 50, 0, ['DOUBLE_WIDE', 'KING_1']],\n    'Ancient Behemoth': [6168, 300, 9, 19, 19, 30, 50, 0,\n                         ['DOUBLE_WIDE', 'KING_1']],\n    'Gnoll': [56, 6, 4, 3, 5, 2, 3, 0, []],\n    'Gnoll Marauder': [90, 6, 5, 4, 6, 2, 3, 0, []],\n    'Lizardman': [126, 14, 4, 5, 6, 2, 3, 12, ['SHOOTING_ARMY']],\n    'Lizard Warrior': [156, 15, 5, 6, 8, 2, 5, 24, ['SHOOTING_ARMY']],\n    'Serpent Fly': [256, 20, 9, 7, 9, 2, 5, 0, ['FLYING_ARMY']],\n    'Dragon Fly': [256, 20, 13, 8, 10, 2, 5, 0, ['FLYING_ARMY']],\n    'Basilisk': [552, 35, 5, 11, 11, 6, 10, 0, ['DOUBLE_WIDE']],\n    'Greater Basilisk': [714, 40, 7, 12, 12, 6, 10, 0, ['DOUBLE_WIDE']],\n    'Gorgon': [890, 70, 5, 10, 14, 12, 16, 0, ['DOUBLE_WIDE']],\n    'Mighty Gorgon': [1028, 70, 6, 11, 16, 12, 16, 0, ['DOUBLE_WIDE']],\n    'Wyvern': [1350, 70, 7, 14, 14, 14, 18, 0, ['DOUBLE_WIDE', 'FLYING_ARMY']],\n    'Wyvern Monarch': [1518, 70, 11, 14, 14, 18, 22, 0,\n                       ['DOUBLE_WIDE', 'FLYING_ARMY']],\n    'Hydra': [4120, 175, 5, 16, 18, 25, 45, 0,\n              ['DOUBLE_WIDE', 'KING_1', 'const_free_attack']],\n    'Chaos Hydra': [5931, 250, 7, 18, 20, 25, 45, 0,\n                    ['DOUBLE_WIDE', 'KING_1', 'const_free_attack']],\n    'Pixie': [55, 3, 7, 2, 2, 1, 2, 0, ['FLYING_ARMY']],\n    'Sprite': [95, 3, 9, 2, 2, 1, 3, 0, ['FLYING_ARMY', 'const_free_attack']],\n    'Air Elemental': [356, 25, 7, 9, 9, 2, 8, 0, ['cusELEMENTAL']],\n    'Storm Elemental': [486, 25, 8, 9, 9, 2, 8, 24,\n                        ['IMMUNE_TO_MIND_SPELLS', 'SHOOTING_ARMY',\n                         'cusELEMENTAL']],\n    'Water Elemental': [315, 30, 5, 8, 10, 3, 7, 0, ['cusELEMENTAL']],\n    'Ice Elemental': [380, 30, 6, 8, 10, 3, 7, 24,\n                      ['IMMUNE_TO_MIND_SPELLS', 'SHOOTING_ARMY',\n                       'cusELEMENTAL']],\n    'Fire Elemental': [345, 35, 6, 10, 8, 4, 6, 0, ['cusELEMENTAL']],\n    'Energy Elemental': [470, 35, 8, 12, 8, 4, 6, 0,\n                         ['IMMUNE_TO_MIND_SPELLS', 'IMMUNE_TO_FIRE_SPELLS',\n                          'FLYING_ARMY', 'cusELEMENTAL']],\n    'Earth Elemental': [330, 40, 4, 10, 10, 4, 8, 0, ['cusELEMENTAL']],\n    'Magma Elemental': [490, 40, 6, 11, 11, 6, 10, 0,\n                        ['IMMUNE_TO_MIND_SPELLS', 'cusELEMENTAL']],\n    'Psychic Elemental': [1669, 75, 7, 15, 13, 10, 20, 0,\n                          ['IMMUNE_TO_MIND_SPELLS', 'DOUBLE_WIDE',\n                           'const_free_attack', 'MULTI_HEADED',\n                           'cusELEMENTAL']],\n    'Magic Elemental': [2012, 80, 9, 15, 13, 15, 25, 0,\n                        ['IMMUNE_TO_MIND_SPELLS', 'DOUBLE_WIDE',\n                         'const_free_attack', 'MULTI_HEADED', 'cusELEMENTAL']],\n    'Firebird': [4547, 150, 15, 18, 18, 30, 40, 0,\n                 ['IMMUNE_TO_FIRE_SPELLS', 'DOUBLE_WIDE', 'FLYING_ARMY',\n                  'KING_1', 'HAS_EXTENDED_ATTACK']],\n    'Phoenix': [6721, 200, 21, 21, 18, 30, 40, 0,\n                ['IMMUNE_TO_FIRE_SPELLS', 'DOUBLE_WIDE', 'FLYING_ARMY',\n                 'KING_1', 'HAS_EXTENDED_ATTACK']],\n    'Peasant': [15, 1, 3, 1, 1, 1, 1, 0, []],\n    'Halfling': [75, 4, 5, 4, 2, 1, 3, 24, ['SHOOTING_ARMY']],\n    'Rogue': [135, 10, 6, 8, 3, 2, 4, 0, []],\n    'Boar': [145, 15, 6, 6, 5, 2, 3, 0, []],\n    'Mummy': [270, 30, 5, 7, 7, 3, 5, 0, ['IS_UNDEAD']],\n    'Nomad': [345, 30, 7, 9, 8, 2, 6, 0, []],\n    'Sharpshooter': [585, 15, 9, 12, 10, 8, 10, 32, ['SHOOTING_ARMY']],\n    'Troll': [1024, 40, 7, 14, 7, 10, 15, 0, []],\n    'Gold Golem': [600, 50, 5, 11, 12, 8, 10, 0, ['cusGOLEM']],\n    'Diamond Golem': [775, 60, 5, 13, 12, 10, 14, 0, ['cusGOLEM']],\n    'Enchanter': [1210, 30, 9, 17, 12, 14, 14, 32,\n                  ['SHOOTING_ARMY', 'const_no_melee_penalty']],\n    'Faerie Dragon': [19580, 500, 15, 20, 20, 20, 30, 0,\n                      ['DOUBLE_WIDE', 'FLYING_ARMY', 'KING_1']],\n    'Rust Dragon': [26433, 750, 17, 30, 30, 50, 50, 0,\n                    ['DOUBLE_WIDE', 'FLYING_ARMY', 'KING_1']],\n    'Crystal Dragon': [39338, 800, 16, 40, 40, 60, 75, 0,\n                       ['DOUBLE_WIDE', 'FLYING_ARMY', 'KING_1']],\n    'Azure Dragon': [78845, 1000, 19, 50, 50, 70, 80, 0,\n                     ['DOUBLE_WIDE', 'FLYING_ARMY', 'KING_1']]\n}\n",
		"pi = Math.PI\ne = Math.E\n\nexp = Math.exp\n\ndef expm1 (x):      # IE workaround\n    return Math.exp (x) - 1\n\ndef log (x, base):\n    return Math.log (x) if base is js_undefined else Math.log (x) / Math.log (base)\n\ndef log1p (x):      # IE workaround\n    return Math.log (x + 1)\n\ndef log2 (x):       # IE workaround\n    return Math.log (x) / Math.LN2\n    \ndef log10 (x):      # IE workaround\n    return Math.log (x) / Math.LN10\n\npow = Math.pow\nsqrt = Math.sqrt\n\nsin = Math.sin\ncos = Math.cos\ntan = Math.tan\n\nasin = Math.asin\nacos = Math.acos\natan = Math.atan\natan2 = Math.atan2\n\nhypot = Math.hypot\n    \ndef degrees (x):\n    return x * 180 / Math.PI\n    \ndef radians (x):\n    return x * Math.PI / 180\n    \nsinh = Math.sinh\ncosh = Math.cosh\ntanh = Math.tanh\n\nasinh = Math.asinh\nacosh = Math.acosh\natanh = Math.atanh\n\nfloor = Math.floor\nceil = Math.ceil\ntrunc = Math.trunc\n\nisnan = js_isNaN\n\ninf = js_Infinity\nnan = js_NaN\n",
		"# Mersenne-Twister random number algorithm\n\nimport math\n\n_array = [0 for i in range (624)]\n_index = 0\n_bitmask1 = (2 ** 32) - 1\n_bitmask2 = 2 ** 31\n_bitmask3 = (2 ** 31) - 1\n\ndef _fill_array():\n    global _array\n    for i in range (624):\n        y = (_array [i] & _bitmask2) + (_array [(i + 1) % 624] & _bitmask3)\n        _array [i] = _array [(i + 397) % 624] ^ (y >> 1)\n        if y % 2 != 0:\n            _array[i] ^= 2567483615\n            \ndef _random_integer ():\n    global _index\n    global _array\n    if _index == 0:\n        _fill_array ()\n    y = _array [_index]\n    y ^= y >> 11\n    y ^= (y << 7) & 2636928640\n    y ^= (y << 15) & 4022730752\n    y ^= y >> 18\n\n    _index = (_index + 1) % 624\n    return y\n\ndef seed (x = int (_bitmask3 * Math.random ())):\n    global _array\n    global _bitmask1\n    _array [0] = x\n    for i in  range (1, 624):\n        _array [i] = ((1812433253 * _array [i - 1]) ^ ((_array [i - 1] >> 30) + i)) & _bitmask1\n\ndef randint (a, b):\n    return a + _random_integer () % (b - a + 1)\n\ndef choice (seq):\n    return seq [randint (0, len (seq) - 1)]\n\ndef random ():\n    return _random_integer () / _bitmask3\n\ndef shuffle (x):    # Fisher-Yates unbiased shuffle\n    for i in range (len (x) - 1, 0, -1):\n        j = math.floor (random () * (i + 1))\n        temp = x [i]\n        x [i] = x [j]\n        x [j] = temp\n    \nseed ()\n",
		"from math import ceil, pi, cos, log\nfrom random import random, randint\n\nfrom crtraits import data, haters, elementals\n\n\nkeywords = {\n    'DOUBLE_WIDE',\n    'SHOOTING_ARMY',\n    'const_free_attack',\n    'const_jousting',\n    'const_no_melee_penalty',\n    'const_two_attacks',\n    'IS_UNDEAD',\n    'cusELEMENTAL',\n    'cusGOLEM'\n}\n\n\n# Box-Muller transform\ndef my_gauss(mu, sigma):\n    return sigma * ((-2*log(random()))**.5 * cos(2*pi*random())) + mu\n\n\n# for sufficiently large n we can use much faster normal approximation\ndef my_binomial(n, p):\n    if n < 100:\n        return sum(random() < p for _ in range(int(n)))\n    return int(my_gauss(n*p, (n*p*(1-p))**.5))\n\n\ndef my_divmod(n, m):\n    div = n // m\n    mod = n - m * div\n    return div, mod\n\n\ndef make_unit(name):\n    assert name in data\n    # return UnitType(*([name] + data[name]))\n    d = data[name]\n    return UnitType(name, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8])\n\n\nclass UnitType(object):\n\n    def __init__(self, name, aiv, hp, spd, att, df,\n                 dmlow, dmhi, shots, abi):\n        self.name = name\n        self.ai_value = aiv\n        self.hp = hp\n        self.speed = spd\n        self.attack = att\n        self.defense = df\n        self.dmg_min = dmlow\n        self.dmg_max = dmhi\n        self.shots = shots\n        self.attributes = [x for x in abi if x in keywords]\n        self.hates = [v for (k, v) in haters if k == self.name]\n        self.opp_elem = [v for (k, v) in elementals if k == self.name]\n\n\nclass Stack(object):\n\n    def __init__(self, unit, count):\n        # these values can't change during combat:\n        self.unit = unit\n        self.cap = count\n        self.name = unit.name\n        self.speed = unit.speed\n        self.true_hp = unit.hp\n        self.true_attack = unit.attack\n        self.true_defense = unit.defense\n        self.dmg_min = unit.dmg_min\n        self.dmg_max = unit.dmg_max\n        self.hates = unit.hates\n        self.opp_elem = unit.opp_elem\n        self.attributes = unit.attributes\n\n        if self.name == 'Battle Dwarf':\n            self.magic_resist = .4\n        elif self.name in ['Dwarf', 'Crystal Dragon']:\n            self.magic_resist = .2\n        else:\n            self.magic_resist = 0.\n\n        if self.name == 'Gold Dragon':\n            self.spell_immunity = 4\n        elif self.name in ['Black Dragon', 'Magic Elemental']:\n            self.spell_immunity = 5\n        elif self.name in ['Green Dragon', 'Red Dragon', 'Azure Dragon']:\n            self.spell_immunity = 3\n        else:\n            self.spell_immunity = 0\n\n        # these can:\n        self.reset_state()\n\n    def reset_state(self):\n        self.count = self.cap\n        self.hp = self.true_hp\n        self.hp_left = self.hp\n        self.attack = self.true_attack\n        self.defense = self.true_defense\n        self.shots = self.unit.shots\n\n        self.aged = -1\n        self.poisoned = -1\n        self.times_poisoned = 0\n        self.cursed = 0\n        self.weakened = 0\n        self.diseased = 0\n\n        self.petrified = 0\n        self.blinded = 0\n        self.paralyzed = 0\n        self.stunned_from_retaliation = False\n\n        self.rebirth_available = self.name == 'Phoenix' or False\n\n    def take_dmg(self, dmg):\n        if dmg < self.hp_left:\n            self.hp_left -= dmg\n        else:\n            dmg -= self.hp_left\n            num_killed, rem = my_divmod(dmg, self.hp)\n            self.count -= num_killed + 1\n            self.hp_left = self.hp - rem\n            self.count = max(self.count, 0)\n        if self.name == 'Phoenix' and not self.is_alive() \\\n                and self.rebirth_available:\n            self.rebirth()\n\n    def __calc_base_damage(self, other):\n        real_dmg_max = self.dmg_min if self.cursed > 0 else self.dmg_max\n        if self.count < 10:\n            base_dmg = sum([randint(self.dmg_min, real_dmg_max)\n                            for _ in range(int(self.count))])\n        else:\n            base_dmg = sum([randint(self.dmg_min, real_dmg_max)\n                            for _ in range(10)]) * self.count // 10\n\n        defense = other.defense\n        if self.name == 'Behemoth':\n            defense = int(.6 * defense)\n        elif self.name == 'Ancient Behemoth':\n            defense = int(.2 * defense)\n\n        att_to_def = self.attack - defense\n        base_dmg_reduction = 0.\n        base_dmg_bonus = 0.\n        if att_to_def > 0:\n            base_dmg_bonus = min(.05 * att_to_def, 3.)\n        else:\n            base_dmg_reduction = min(.025 * -att_to_def, .7)\n\n        return base_dmg, base_dmg_bonus, base_dmg_reduction\n\n    # __pragma__('kwargs')\n\n    def attack_melee(self, other, dmg_reductions=None, melee_penalty=False,\n                     retaliation=False):\n        dmg_bonus = 0.\n        if dmg_reductions is None:\n            dmg_reductions = []\n        base_dmg, base_dmg_bonus, base_dmg_reduction = \\\n            self.__calc_base_damage(other)\n        dmg_bonus += base_dmg_bonus\n        dmg_reductions.append(base_dmg_reduction)\n\n        if melee_penalty:\n            dmg_reductions.append(.5)\n\n        if self.name == 'Dread Knight' and random() < .2:\n            dmg_bonus += 1.\n        elif other.name in self.hates:\n            dmg_bonus += .5\n        elif other.name in self.opp_elem:\n            dmg_bonus += 1.\n\n        if self.name == 'Magic Elemental' and other.spell_immunity == 5:\n            dmg_reductions.append(.5)\n        elif self.name == 'Psychic Elemental' and (\n                other.is_nonliving() or other.name in\n                ['Giant', 'Titan', 'Black Dragon']):\n            dmg_reductions.append(.5)\n\n        damage = base_dmg * (1. + dmg_bonus)\n        # fire shield looks at damage before reductions\n        # damage dealt is at most 20% of total HP of Efreet stack\n        fire_shield_damage = .2 * \\\n            min(damage, (other.count - 1) * other.hp + other.hp_left)\n\n        for reduction in dmg_reductions:\n            damage *= 1. - reduction\n\n        damage = int(damage)\n        other.take_dmg(damage)\n\n        other.petrified = 0\n        other.blinded = 0\n        other.paralyzed = 0\n        other.stunned_from_retaliation = False\n\n        if (self.name == 'Vampire Lord' and\n                not other.is_nonliving()):\n            self.drain_life(damage)\n        elif (self.name == 'Mighty Gorgon' and\n                not other.is_nonliving()):\n            self.death_stare(other)\n        elif (self.name == 'Thunderbird' and\n              other.spell_immunity < 2 and\n              other.name not in ['Earth Elemental', 'Magma Elemental'] and\n              random() < .2 and\n              random() > other.magic_resist):\n            self.thunderbolt(other)\n        elif self.name == 'Rust Dragon':\n            self.acid_breath(other)\n        elif (self.name == 'Ghost Dragon' and\n              not other.is_nonliving() and\n              random() < .2):\n            other.start_aging()\n        elif (self.name == 'Wyvern Monarch' and\n                other.times_poisoned < 5 and\n                not other.is_nonliving() and\n                random() < .2):\n            other.start_poison()\n        elif (self.name in ['Black Knight', 'Dread Knight', 'Mummy'] and\n              other.spell_immunity < 1 and\n              not other.is_undead() and\n              other.name not in [\n                  'Efreet', 'Efreet Sultan', 'Fire Elemental',\n                  'Energy Elemental', 'Firebird', 'Phoenix'] and\n              random() > other.magic_resist):\n            if ((self.name == 'Mummy' and random() < .5) or\n                    (self.name != 'Mummy' and random() < .2)):\n                self.start_curse(other)\n        elif (self.name == 'Dragon Fly' and\n              other.spell_immunity < 2 and\n              random() > other.magic_resist):\n            self.start_weakness(other)\n        elif (self.name == 'Zombie' and\n              not other.is_nonliving() and\n              random() < .2):\n            self.start_disease(other)\n        elif (self.name in ['Medusa', 'Medusa Queen', 'Basilisk',\n                            'Greater Basilisk'] and\n              other.spell_immunity == 0 and\n              other.name not in ['Troglodyte', 'Infernal Troglodyte'] and\n              random() < .2):\n            self.start_petrification(other)\n            other.stunned_from_retaliation = retaliation\n        elif (self.name in ['Unicorn', 'War Unicorn'] and\n              other.spell_immunity < 2 and\n              not other.is_nonliving() and\n              other.name not in [\n                  'Troglodyte', 'Infernal Troglodyte', 'Giant', 'Titan',\n                  'Efreet', 'Efreet Sultan', 'Firebird', 'Phoenix'] and\n              random() < .2):\n            self.start_blindness(other)\n            other.stunned_from_retaliation = retaliation\n        elif (self.name == 'Scorpicore' and\n              other.name not in ['Gold Dragon', 'Black Dragon',\n                                 'Magic Elemental'] and\n              random() < .2):\n            self.start_paralysis(other)\n            other.stunned_from_retaliation = retaliation\n\n        if (other.name == 'Efreet Sultan' and\n            self.name not in [\n                'Efreet', 'Efreet Sultan', 'Fire Elemental',\n                'Energy Elemental', 'Firebird', 'Phoenix']):\n            self.efreet_fire_shield(fire_shield_damage)\n\n    # __pragma__('nokwargs')\n\n    def attack_range(self, other, range_penalty):\n        assert self.is_shooter() and self.shots > 0\n        dmg_bonus = 0.\n        base_dmg, base_dmg_bonus, base_dmg_reduction = \\\n            self.__calc_base_damage(other)\n        dmg_bonus += base_dmg_bonus\n\n        damage = base_dmg * (1. + dmg_bonus) * (1. - base_dmg_reduction)\n        if range_penalty:\n            damage /= 2.\n\n        other.take_dmg(int(damage))\n        self.shots -= 1\n\n    def start_weakness(self, other):\n        assert self.name == 'Dragon Fly'\n        if self.speed > other.speed:\n            other.weakened = 3\n        elif self.speed < other.speed:\n            other.weakened = 2\n        else:\n            other.weakened = randint(2, 3)\n        other.attack = max(0, other.true_attack - 6)\n\n    def weakness(self):\n        assert self.weakened > 0\n        self.weakened -= 1\n        if self.weakened == 0:\n            self.attack = self.true_attack\n\n    def start_curse(self, other):\n        assert self.name in ['Mummy', 'Black Knight', 'Dread Knight']\n        if self.speed > other.speed:\n            other.cursed = 3\n        elif self.speed < other.speed:\n            other.cursed = 2\n        else:\n            other.cursed = randint(2, 3)\n\n    def curse(self):\n        assert self.cursed > 0\n        self.cursed -= 1\n\n    def start_disease(self, other):\n        assert self.name == 'Zombie'\n        if self.speed > other.speed:\n            other.diseased = 3\n        elif self.speed < other.speed:\n            other.diseased = 2\n        else:\n            other.diseased = randint(2, 3)\n        other.attack = max(0, other.true_attack - 2)\n        other.defense = max(0, other.true_defense - 2)\n\n    def disease(self):\n        assert self.diseased > 0\n        self.diseased -= 1\n        if self.diseased == 0:\n            self.attack = self.true_attack\n            self.defense = self.true_defense\n\n    def start_petrification(self, other):\n        assert self.name in ['Medusa', 'Medusa Queen', 'Basilisk',\n                             'Greater Basilisk']\n        if self.speed > other.speed:\n            other.petrified = 3\n        elif self.speed < other.speed:\n            other.petrified = 2\n        else:\n            other.petrified = randint(2, 3)\n\n    def petrification(self):\n        assert self.petrified > 0\n        self.petrified -= 1\n\n    def start_blindness(self, other):\n        assert self.name in ['Unicorn', 'War Unicorn']\n        if self.speed > other.speed:\n            other.blinded = 3\n        elif self.speed < other.speed:\n            other.blinded = 2\n        else:\n            other.blinded = randint(2, 3)\n\n    def blindness(self):\n        assert self.blinded > 0\n        self.blinded -= 1\n\n    def start_paralysis(self, other):\n        assert self.name == 'Scorpicore'\n        if self.speed > other.speed:\n            other.paralyzed = 3\n        elif self.speed < other.speed:\n            other.paralyzed = 2\n        else:\n            other.paralyzed = randint(2, 3)\n\n    def paralysis(self):\n        assert self.paralyzed > 0\n        self.paralyzed -= 1\n\n    def start_aging(self):\n        was_already_aged = self.aged > 0\n        self.aged = 3 if self.speed < 14 else 2\n        if not was_already_aged:\n            hp_missing = self.hp - self.hp_left\n            self.hp = (self.hp + 1) // 2\n            self.hp_left = max(1, self.hp - hp_missing)\n\n    def age(self):\n        assert self.aged > 0\n        self.aged -= 1\n        if self.aged == 0:\n            self.stop_aging()\n\n    def stop_aging(self):\n        assert self.aged == 0\n        self.aged = -1\n        hp_missing = self.hp - self.hp_left\n        self.hp = self.true_hp\n        self.hp_left = self.hp - hp_missing\n\n    def start_poison(self):\n        was_already_poisoned = self.poisoned >= 0\n        self.poisoned = 2\n        if not was_already_poisoned:\n            self.times_poisoned += 1\n            hp_missing = self.hp - self.hp_left\n            self.hp = int(ceil(self.true_hp *\n                               (1 - .1 * self.times_poisoned)))\n            self.hp_left = max(1, self.hp - hp_missing)\n\n    def poison(self):\n        assert self.poisoned >= 0\n        self.poisoned -= 1\n        if self.times_poisoned < 5 and self.poisoned >= 0:\n            self.times_poisoned += 1\n            hp_missing = self.hp - self.hp_left\n            self.hp = int(ceil(self.true_hp *\n                               (1 - .1 * self.times_poisoned)))\n            self.hp_left = max(1, self.hp - hp_missing)\n\n    def drain_life(self, damage_dealt):\n        assert self.name == 'Vampire Lord'\n        if self.hp_left + damage_dealt <= self.hp:\n            self.hp_left += damage_dealt\n        else:\n            damage_dealt -= self.hp - self.hp_left\n            self.hp_left = self.hp\n            res, rem = my_divmod(damage_dealt, self.hp)\n            self.count = min(self.cap, self.count + res)\n            if self.count < self.cap and rem:\n                self.count += 1\n                self.hp_left = rem\n\n    def acid_breath(self, other):\n        other.defense = max(0, other.defense - 3)\n        if random() < .3:\n            other.take_dmg(25 * self.count)\n\n    def magic_dmg_resistance(self):\n        if self.name == 'Stone Golem':\n            return .5\n        elif self.name == 'Iron Golem':\n            return .75\n        elif self.name == 'Gold Golem':\n            return .85\n        elif self.name == 'Diamond Golem':\n            return .95\n        return 0.\n\n    def efreet_fire_shield(self, damage):\n        damage *= (1. - self.magic_dmg_resistance())\n        if self.name in ['Water Elemental', 'Ice Elemental']:\n            damage *= 2\n        self.take_dmg(int(damage))\n\n    def thunderbolt(self, other):\n        assert self.name == 'Thunderbird'\n        damage = 10 * self.count\n        damage *= (1 - other.magic_dmg_resistance())\n        if self.name in ['Air Elemental', 'Storm Elemental']:\n            damage *= 2\n        other.take_dmg(int(damage))\n\n    def death_stare(self, other):\n        assert self.name == 'Mighty Gorgon' and not other.is_nonliving()\n        to_death_stare = min(my_binomial(self.count, .1),\n                             (self.count + 9) // 10)\n        if to_death_stare:\n            other.count = max(0, other.count - to_death_stare)\n            other.hp_left = other.hp\n\n    def rebirth(self):\n        assert (self.name == 'Phoenix' and not self.is_alive() and\n                self.rebirth_available)\n        certain, rem = my_divmod(self.count, 5)\n        to_rebirth = certain + (random() < .2*rem)\n        self.count = to_rebirth\n        self.rebirth_available = False\n\n    def regenerate(self):\n        assert self.name in ['Wight', 'Wraith', 'Troll']\n        self.hp_left = self.hp\n\n    def is_alive(self):\n        return self.count > 0\n\n    def is_shooter(self):\n        return 'SHOOTING_ARMY' in self.attributes\n\n    def strikes_twice(self):\n        return 'const_two_attacks' in self.attributes and not self.is_shooter()\n\n    def shoots_twice(self):\n        return 'const_two_attacks' in self.attributes and self.is_shooter()\n\n    def is_big(self):\n        return 'DOUBLE_WIDE' in self.attributes\n\n    def melee_penalty(self):\n        return (self.is_shooter() and\n                not 'const_no_melee_penalty' in self.attributes)\n\n    def no_retaliation(self):\n        return 'const_free_attack' in self.attributes\n\n    def range_penalty(self):\n        return self.is_shooter() and self.name != 'Sharpshooter'\n\n    def is_elemental(self):\n        return 'cusELEMENTAL' in self.attributes\n\n    def is_undead(self):\n        return 'IS_UNDEAD' in self.attributes\n\n    def is_golem(self):\n        return 'cusGOLEM' in self.attributes\n\n    def is_nonliving(self):\n        return self.is_elemental() or self.is_undead() or self.is_golem()\n\n    def is_stunned(self):\n        return bool(self.petrified or self.blinded or self.paralyzed)\n\n    def advance_statuses(self):\n        if self.aged > 0 and self.is_alive():\n            self.age()\n        elif self.poisoned >= 0 and self.is_alive():\n            self.poison()\n        elif self.cursed:\n            self.curse()\n        elif self.weakened:\n            self.weakness()\n        elif self.diseased:\n            self.disease()\n        elif self.petrified:\n            self.petrification()\n        elif self.blinded:\n            self.blindness()\n        elif self.paralyzed:\n            self.paralysis()\n",
		"from unit import make_unit, Stack\nfrom combat import fight as fight_orig\nfrom combat import find_balance as find_balance_orig\n\n\ndef fight(nameA, countA, nameB, countB, num_fights):\n    A = Stack(make_unit(nameA), countA)\n    B = Stack(make_unit(nameB), countB)\n    result = fight_orig(A, B, num_fights)\n    resA = A.name + \": {}\".format(result[A.name][0])\n    resB = B.name + \": {}\".format(result[B.name][0])\n    return resA, resB\n\n\ndef find_balance(nameA, countA, nameB, countB, num_fights):\n    count1 = countA or countB\n    idxA = 1 if countB else 0\n    idxB = (idxA + 1) % 2\n    name1 = nameA if count1 == countA else nameB\n    name2 = nameB if count1 == countA else nameA\n    result = find_balance_orig(name1, name2, num_fights, count1)\n    res = u\"{} {} \\u2248 {} {}\".format(\n        result[idxA], nameA,\n        result[idxB], nameB)\n    return res\n"
	],
	"mappingsozlDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAKA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAMA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AASA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACzOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AAmBA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuDA;AAvDA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAczhBA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}